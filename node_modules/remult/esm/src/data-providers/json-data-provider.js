import { ArrayEntityDataProvider } from './array-entity-data-provider.js';
export class JsonDataProvider {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    getEntityDataProvider(entity) {
        return new JsonEntityDataProvider(entity, this.storage);
    }
    async transaction(action) {
        await action(this);
    }
}
class JsonEntityDataProvider {
    entity;
    helper;
    constructor(entity, helper) {
        this.entity = entity;
        this.helper = helper;
    }
    async loadEntityData(what) {
        let data = [];
        let dbName = await this.entity.dbName;
        let s = await this.helper.getItem(dbName);
        if (s)
            data = JSON.parse(s);
        let dp = new ArrayEntityDataProvider(this.entity, data);
        return what(dp, async () => await this.helper.setItem(dbName, JSON.stringify(data, undefined, 2)));
    }
    p = Promise.resolve();
    find(options) {
        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.find(options))));
    }
    count(where) {
        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.count(where))));
    }
    update(id, data) {
        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.update(id, data).then(async (x) => {
            await save();
            return x;
        }))));
    }
    delete(id) {
        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.delete(id).then(async (x) => {
            await save();
            return x;
        }))));
    }
    async insert(data) {
        return (this.p = this.p.then(() => this.loadEntityData((dp, save) => dp.insert(data).then(async (x) => {
            await save();
            return x;
        }))));
    }
}
