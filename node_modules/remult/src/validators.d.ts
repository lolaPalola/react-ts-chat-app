import type { FieldValidator } from './column-interfaces.js';
import type { ValidateFieldEvent } from './remult3/remult3.js';
export declare class Validators {
    static required: Validator<any>;
    static unique: Validator<any>;
    /**
     * @deprecated is `unique` instead - it also runs only on the backend
     */
    static uniqueOnBackend: Validator<any>;
    static regex: ValidatorWithArgs<string, RegExp> & {
        defaultMessage: ValueValidationMessage<RegExp>;
    };
    static email: Validator<string>;
    static url: Validator<string>;
    static in: <T>(value: readonly T[], withMessage?: ValueValidationMessage<T[]>) => FieldValidator<any, T> & {
        withMessage: ValueValidationMessage<T[]>;
    };
    static notNull: Validator<unknown>;
    static enum: ValidatorWithArgs<any, any> & {
        defaultMessage: ValueValidationMessage<any>;
    };
    static relationExists: Validator<any>;
    static maxLength: ValidatorWithArgs<string, number> & {
        defaultMessage: ValueValidationMessage<number>;
    };
    static minLength: ValidatorWithArgs<string, number> & {
        defaultMessage: ValueValidationMessage<number>;
    };
    static defaultMessage: string;
}
export type Validator<valueType> = FieldValidator<any, valueType> & ((message?: ValidationMessage<valueType, undefined>) => FieldValidator<any, valueType>) & {
    defaultMessage: ValidationMessage<valueType, undefined>;
    /**
     * @deprecated  use (message:string) instead - for example: Validators.required("Is needed")
     */
    withMessage(message: ValidationMessage<valueType, undefined>): FieldValidator<any, valueType>;
};
export declare function createValidator<valueType>(validate: (entity: any, e: ValidateFieldEvent<any, valueType>) => Promise<boolean | string> | boolean | string, defaultMessage?: ValidationMessage<valueType, undefined>): Validator<valueType>;
export declare function valueValidator<valueType>(validate: (value: valueType) => boolean | string | Promise<boolean | string>, defaultMessage?: string): (entity: any, e: ValidateFieldEvent<any, valueType>) => string | boolean | Promise<string | boolean>;
export declare function createValueValidator<valueType>(validate: (value: valueType) => boolean | string | Promise<boolean | string>, defaultMessage?: ValidationMessage<valueType, undefined>): Validator<valueType>;
export declare function createValueValidatorWithArgs<valueType, argsType>(validate: (value: valueType, args: argsType) => boolean | string | Promise<boolean | string>, defaultMessage?: ValueValidationMessage<argsType>): ValidatorWithArgs<valueType, argsType> & {
    defaultMessage: ValueValidationMessage<argsType>;
};
export type ValueValidationMessage<argsType> = string | ((args: argsType) => string);
export type ValidationMessage<valueType, argsType> = string | ((entity: any, event: ValidateFieldEvent<any, valueType>, args: argsType) => string);
export type ValidatorWithArgs<valueType, argsType> = (args: argsType, message?: ValidationMessage<valueType, argsType>) => FieldValidator<any, valueType>;
export declare function createValidatorWithArgs<valueType, argsType>(validate: (entity: any, e: ValidateFieldEvent<any, valueType>, args: argsType) => Promise<boolean | string> | boolean | string, defaultMessage: ValidationMessage<valueType, argsType>): ValidatorWithArgs<valueType, argsType> & {
    defaultMessage: ValidationMessage<valueType, argsType>;
};
