"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRepository = exports.getEntityMetadata = exports.ControllerBase = exports.EntityBase = exports.decorateColumnSettings = exports.buildOptions = exports.storableMember = exports.getValueList = exports.ValueListInfo = exports.ValueListFieldType = exports.isAutoIncrement = exports.FieldType = exports.columnDefsImpl = exports.buildCaption = exports.CaptionTransformer = exports.FieldRefImplementation = exports.controllerRefImpl = exports.getControllerRef = exports.getFields = exports.rowHelperImplementation = exports.createOldEntity = exports.RepositoryImplementation = void 0;
var tslib_1 = require("tslib");
var column_js_1 = require("../column.js");
var CompoundIdField_js_1 = require("../CompoundIdField.js");
var context_js_1 = require("../context.js");
var filter_interfaces_js_1 = require("../filter/filter-interfaces.js");
var sort_js_1 = require("../sort.js");
var assign_js_1 = require("../../assign.js");
var valueConverters_js_1 = require("../valueConverters.js");
var rest_data_provider_js_1 = require("../data-providers/rest-data-provider.js");
var remult_proxy_js_1 = require("../remult-proxy.js");
var getEntityRef_js_1 = require("./getEntityRef.js");
var __updateEntityBasedOnWhere_js_1 = require("./__updateEntityBasedOnWhere.js");
var relationInfoMember_js_1 = require("./relationInfoMember.js");
var relation_loader_js_1 = require("./relation-loader.js");
var repository_internals_js_1 = require("./repository-internals.js");
var filter_consumer_bridge_to_sql_request_js_1 = require("../filter/filter-consumer-bridge-to-sql-request.js");
var remult_static_js_1 = require("../remult-static.js");
//import  { remult } from "../remult-proxy";
var classValidatorValidate = undefined;
// import ("class-validator".toString())
//     .then((v) => {
//         classValidatorValidate = (item, ref) => {
//             return v.validate(item).then(errors => {
//                 for (const err of errors) {
//                     for (const key in err.constraints) {
//                         if (Object.prototype.hasOwnProperty.call(err.constraints, key)) {
//                             const element = err.constraints[key];
//                             ref.fields.find(err.property).error = element;
//                         }
//                     }
//                 }
//             });
//         }
//     })
//     .catch(() => {
//     });
var RepositoryImplementation = /** @class */ (function () {
    function RepositoryImplementation(entity, remult, dataProvider, _info, defaultFindOptions) {
        this.entity = entity;
        this.remult = remult;
        this.dataProvider = dataProvider;
        this._info = _info;
        this.defaultFindOptions = defaultFindOptions;
        this.idCache = new Map();
        this.cache = new Map();
    }
    RepositoryImplementation.prototype[repository_internals_js_1.getInternalKey] = function () {
        return this;
    };
    RepositoryImplementation.prototype.createAfterFilter = function (orderBy, lastRow) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var values, _a, _b, s, existingVal, r, equalToColumn, _c, _d, s, f, equalToColumn_1, equalToColumn_1_1, c;
            var e_1, _e, e_2, _f, e_3, _g;
            return tslib_1.__generator(this, function (_h) {
                values = new Map();
                try {
                    for (_a = tslib_1.__values(sort_js_1.Sort.translateOrderByToSort(this.metadata, orderBy)
                        .Segments), _b = _a.next(); !_b.done; _b = _a.next()) {
                        s = _b.value;
                        existingVal = lastRow[s.field.key];
                        // if (typeof existingVal !== "string" && typeof existingVal !== "number") {
                        // }
                        // else {
                        //     let ei = getEntitySettings(s.field.valueType, false);
                        //     if (ei) {
                        //         existingVal = await this.remult.repo(s.field.valueType).findId(existingVal);
                        //     }
                        // }
                        values.set(s.field.key, existingVal);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                r = { $or: [] };
                equalToColumn = [];
                try {
                    for (_c = tslib_1.__values(sort_js_1.Sort.translateOrderByToSort(this.metadata, orderBy)
                        .Segments), _d = _c.next(); !_d.done; _d = _c.next()) {
                        s = _d.value;
                        f = {};
                        try {
                            for (equalToColumn_1 = (e_3 = void 0, tslib_1.__values(equalToColumn)), equalToColumn_1_1 = equalToColumn_1.next(); !equalToColumn_1_1.done; equalToColumn_1_1 = equalToColumn_1.next()) {
                                c = equalToColumn_1_1.value;
                                f[c.key] = values.get(c.key);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (equalToColumn_1_1 && !equalToColumn_1_1.done && (_g = equalToColumn_1.return)) _g.call(equalToColumn_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        equalToColumn.push(s.field);
                        if (s.isDescending) {
                            f[s.field.key] = { $lt: values.get(s.field.key) };
                        }
                        else
                            f[s.field.key] = { $gt: values.get(s.field.key) };
                        r.$or.push(f);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return [2 /*return*/, r];
            });
        });
    };
    RepositoryImplementation.prototype.relations = function (item) {
        var _this = this;
        return new Proxy({}, {
            get: function (target, key) {
                var field = _this.fields.find(key);
                var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(field);
                if (!rel)
                    throw Error(key + ' is not a relation');
                var _a = _this.getFocusedRelationRepo(field, item), toRepo = _a.toRepo, returnNull = _a.returnNull, returnUndefined = _a.returnUndefined;
                if (rel.type === 'toMany')
                    return toRepo;
                else
                    return {
                        findOne: function (options) {
                            if (returnNull)
                                return Promise.resolve(null);
                            if (returnUndefined)
                                return Promise.resolve(undefined);
                            return toRepo.findFirst({}, options);
                        },
                    };
            },
        });
    };
    RepositoryImplementation.prototype.getFocusedRelationRepo = function (field, item) {
        var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(field);
        var repo = rel.toRepo;
        var _a = this.findOptionsBasedOnRelation(rel, field, undefined, item, repo), findOptions = _a.findOptions, returnNull = _a.returnNull, returnUndefined = _a.returnUndefined;
        var toRepo = new RepositoryImplementation(repo.entity, repo.remult, repo.dataProvider, repo._info, findOptions);
        return { toRepo: toRepo, returnNull: returnNull, returnUndefined: returnUndefined };
    };
    Object.defineProperty(RepositoryImplementation.prototype, "edp", {
        get: function () {
            return this.__edp
                ? this.__edp
                : (this.__edp = this.dataProvider.getEntityDataProvider(this.metadata));
        },
        enumerable: false,
        configurable: true
    });
    RepositoryImplementation.prototype.getCachedById = function (id, doNotLoadIfNotFound) {
        id = id + '';
        this.getCachedByIdAsync(id, doNotLoadIfNotFound);
        var r = this.idCache.get(id);
        if (r instanceof Promise)
            return undefined;
        return r;
    };
    RepositoryImplementation.prototype.getCachedByIdAsync = function (id, doNotLoadIfNotFound) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r, row;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = id + '';
                        r = this.idCache.get(id);
                        if (!(r instanceof Promise)) return [3 /*break*/, 2];
                        return [4 /*yield*/, r];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (this.idCache.has(id)) {
                            return [2 /*return*/, r];
                        }
                        if (doNotLoadIfNotFound)
                            return [2 /*return*/, undefined];
                        this.idCache.set(id, undefined);
                        row = this.findId(id).then(function (row) {
                            if (row === undefined) {
                                r = null;
                            }
                            else
                                r = row;
                            _this.idCache.set(id, r);
                            return r;
                        });
                        this.idCache.set(id, row);
                        return [4 /*yield*/, row];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RepositoryImplementation.prototype.addToCache = function (item) {
        if (item)
            this.idCache.set(this.getEntityRef(item).getId() + '', item);
    };
    Object.defineProperty(RepositoryImplementation.prototype, "metadata", {
        get: function () {
            return this._info;
        },
        enumerable: false,
        configurable: true
    });
    RepositoryImplementation.prototype.addEventListener = function (listener) {
        var _this = this;
        if (!this.listeners)
            this.listeners = [];
        this.listeners.push(listener);
        return function () {
            _this.listeners.splice(_this.listeners.indexOf(listener), 1);
        };
    };
    RepositoryImplementation.prototype.query = function (options) {
        return new QueryResultImpl(options, this);
    };
    RepositoryImplementation.prototype.getEntityRef = function (entity) {
        var x = entity[getEntityRef_js_1.entityMember];
        if (!x) {
            this.fixTypes(entity);
            x = new rowHelperImplementation(this._info, entity, this, this.edp, this.remult, true);
            Object.defineProperty(entity, getEntityRef_js_1.entityMember, {
                //I've used define property to hide this member from console.lo g
                get: function () { return x; },
            });
            x.saveOriginalData();
        }
        return x;
    };
    RepositoryImplementation.prototype.delete = function (item) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ref, ref2_1, ref2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref = (0, getEntityRef_js_1.getEntityRef)(item, false);
                        if (ref)
                            return [2 /*return*/, ref.delete()];
                        if (!(typeof item === 'string' || typeof item === 'number')) return [3 /*break*/, 4];
                        if (!this.dataProvider.isProxy) return [3 /*break*/, 1];
                        return [2 /*return*/, this.edp.delete(item)];
                    case 1: return [4 /*yield*/, this.findId(item)];
                    case 2:
                        ref2_1 = _a.sent();
                        if (!ref2_1) return [3 /*break*/, 4];
                        return [4 /*yield*/, (0, getEntityRef_js_1.getEntityRef)(ref2_1).delete()];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        ref2 = this.getRefForExistingRow(item, undefined);
                        if (!!this.dataProvider.isProxy) return [3 /*break*/, 6];
                        return [4 /*yield*/, ref2.reload()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, ref2.delete()];
                }
            });
        });
    };
    RepositoryImplementation.prototype.insert = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r, entity_1, entity_1_1, item, _a, _b, e_4_1, ref;
            var e_4, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!Array.isArray(entity)) return [3 /*break*/, 9];
                        r = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        entity_1 = tslib_1.__values(entity), entity_1_1 = entity_1.next();
                        _d.label = 2;
                    case 2:
                        if (!!entity_1_1.done) return [3 /*break*/, 5];
                        item = entity_1_1.value;
                        _b = (_a = r).push;
                        return [4 /*yield*/, this.insert(item)];
                    case 3:
                        _b.apply(_a, [_d.sent()]);
                        _d.label = 4;
                    case 4:
                        entity_1_1 = entity_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (entity_1_1 && !entity_1_1.done && (_c = entity_1.return)) _c.call(entity_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, r];
                    case 9:
                        ref = (0, getEntityRef_js_1.getEntityRef)(entity, false);
                        if (!ref) return [3 /*break*/, 11];
                        if (!ref.isNew())
                            throw 'Item is not new';
                        return [4 /*yield*/, ref.save()];
                    case 10: return [2 /*return*/, _d.sent()];
                    case 11: return [4 /*yield*/, this.getEntityRef(this.create(entity)).save()];
                    case 12: return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    Object.defineProperty(RepositoryImplementation.prototype, "fields", {
        get: function () {
            return this.metadata.fields;
        },
        enumerable: false,
        configurable: true
    });
    RepositoryImplementation.prototype.validate = function (entity) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ref, hasError, fields_1, fields_1_1, f, e_5_1;
            var e_5, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ref = (0, getEntityRef_js_1.getEntityRef)(entity, false);
                        if (!ref)
                            ref = this.getEntityRef(tslib_1.__assign({}, entity));
                        if (!(!fields || fields.length === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, ref.validate()];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        ref.__clearErrorsAndReportChanged();
                        hasError = false;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 8, 9, 10]);
                        fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next();
                        _b.label = 4;
                    case 4:
                        if (!!fields_1_1.done) return [3 /*break*/, 7];
                        f = fields_1_1.value;
                        return [4 /*yield*/, ref.fields.find(f).validate()];
                    case 5:
                        if (!(_b.sent()))
                            hasError = true;
                        _b.label = 6;
                    case 6:
                        fields_1_1 = fields_1.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_5_1 = _b.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        if (!hasError)
                            return [2 /*return*/, undefined];
                        return [2 /*return*/, ref.buildErrorInfoObject()];
                }
            });
        });
    };
    RepositoryImplementation.prototype.update = function (id, entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ref_1, ref_2, ref, r, key, f;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ref_1 = (0, getEntityRef_js_1.getEntityRef)(entity, false);
                        if (!ref_1) return [3 /*break*/, 2];
                        return [4 /*yield*/, ref_1.save()];
                    case 1: return [2 /*return*/, (_a.sent())];
                    case 2:
                        {
                            ref_2 = (0, getEntityRef_js_1.getEntityRef)(id, false);
                            if (ref_2) {
                                (0, assign_js_1.assign)(id, entity);
                                return [2 /*return*/, ref_2.save()];
                            }
                        }
                        if (typeof id === 'object') {
                            ref = this.getRefForExistingRow(id, this.metadata.idMetadata.getId(id));
                            Object.assign(ref.instance, entity);
                        }
                        else
                            ref = this.getRefForExistingRow(entity, id);
                        if (!this.dataProvider.isProxy) return [3 /*break*/, 4];
                        return [4 /*yield*/, ref.save(Object.keys(entity))];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, ref.reload()];
                    case 5:
                        r = _a.sent();
                        if (!r)
                            throw new Error('Not Found');
                        for (key in entity) {
                            if (Object.prototype.hasOwnProperty.call(entity, key)) {
                                f = ref.fields[key];
                                if (entity[key] === undefined && (0, relationInfoMember_js_1.getRelationFieldInfo)(f.metadata))
                                    continue;
                                //@ts-ignore
                                if (f)
                                    r[key] = entity[key];
                            }
                        }
                        return [4 /*yield*/, this.fixTypes(r)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, ref.save()];
                    case 7: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RepositoryImplementation.prototype.getRefForExistingRow = function (entity, id) {
        var e_6, _a;
        var ref = (0, getEntityRef_js_1.getEntityRef)(entity, false);
        if (!ref) {
            var instance = new this.entity(this.remult);
            try {
                for (var _b = tslib_1.__values(this.fieldsOf(entity)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    instance[field.key] = entity[field.key];
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
            this.fixTypes(instance);
            var row_1 = new rowHelperImplementation(this._info, instance, this, this.edp, this.remult, false);
            if (typeof id === 'object')
                id = this.metadata.idMetadata.getId(id);
            if (id) {
                row_1.id = id;
                row_1.originalId = id;
            }
            else
                row_1.id = row_1.getId();
            ref = row_1;
            Object.defineProperty(instance, getEntityRef_js_1.entityMember, {
                get: function () { return row_1; },
            });
        }
        return ref;
    };
    RepositoryImplementation.prototype.save = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ref, id;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Array.isArray(entity)) return [3 /*break*/, 1];
                        return [2 /*return*/, Promise.all(entity.map(function (x) { return _this.save(x); }))];
                    case 1:
                        ref = (0, getEntityRef_js_1.getEntityRef)(entity, false);
                        if (!ref) return [3 /*break*/, 3];
                        return [4 /*yield*/, ref.save()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        if (!(entity instanceof EntityBase)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getEntityRef(entity).save()];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        id = this.metadata.idMetadata.getId(entity);
                        if (id === undefined)
                            return [2 /*return*/, this.insert(entity)];
                        return [2 /*return*/, this.update(id, entity)];
                }
            });
        });
    };
    RepositoryImplementation.prototype.liveQuery = function (options) {
        var _this = this;
        if (!options)
            options = {};
        return {
            subscribe: function (l) {
                var _a, _b;
                var listener = l;
                if (typeof l === 'function') {
                    listener = {
                        next: l,
                        complete: function () { },
                        error: function () { },
                    };
                }
                (_a = listener.error) !== null && _a !== void 0 ? _a : (listener.error = function () { });
                (_b = listener.complete) !== null && _b !== void 0 ? _b : (listener.complete = function () { });
                return _this.remult.liveQuerySubscriber.subscribe(_this, options, listener);
            },
        };
    };
    RepositoryImplementation.prototype.rawFind = function (options, skipOrderByAndLimit, loader) {
        if (skipOrderByAndLimit === void 0) { skipOrderByAndLimit = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var opt, rawRows, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options)
                            options = {};
                        if (this.defaultFindOptions) {
                            options = tslib_1.__assign(tslib_1.__assign({}, this.defaultFindOptions), options);
                        }
                        return [4 /*yield*/, this.buildEntityDataProviderFindOptions(options)];
                    case 1:
                        opt = _a.sent();
                        if (skipOrderByAndLimit) {
                            delete opt.orderBy;
                            delete opt.limit;
                        }
                        context_js_1.Remult.onFind(this._info, options);
                        return [4 /*yield*/, this.edp.find(opt)];
                    case 2:
                        rawRows = _a.sent();
                        return [4 /*yield*/, this.loadManyToOneForManyRows(rawRows, options, loader)];
                    case 3:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    RepositoryImplementation.prototype.find = function (options, skipOrderByAndLimit) {
        if (skipOrderByAndLimit === void 0) { skipOrderByAndLimit = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loader, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loader = new relation_loader_js_1.RelationLoader();
                        return [4 /*yield*/, this.rawFind(options, skipOrderByAndLimit, loader)];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, loader.resolveAll()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    RepositoryImplementation.prototype.buildEntityDataProviderFindOptions = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var opt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        opt = {};
                        opt = {};
                        if (!options.orderBy || Object.keys(options.orderBy).length === 0) {
                            options.orderBy = this._info.entityInfo.defaultOrderBy;
                        }
                        _a = opt;
                        return [4 /*yield*/, this.translateWhereToFilter(options.where)];
                    case 1:
                        _a.where = _b.sent();
                        if (options.orderBy !== undefined)
                            opt.orderBy = sort_js_1.Sort.translateOrderByToSort(this.metadata, options.orderBy);
                        if (options.limit !== undefined)
                            opt.limit = options.limit;
                        if (options.page !== undefined)
                            opt.page = options.page;
                        return [2 /*return*/, opt];
                }
            });
        });
    };
    RepositoryImplementation.prototype.fromJsonArray = function (jsonItems, loadOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loader, result;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loader = new relation_loader_js_1.RelationLoader();
                        return [4 /*yield*/, this.loadManyToOneForManyRows(jsonItems.map(function (row) {
                                var e_7, _a;
                                var result = {};
                                try {
                                    for (var _b = tslib_1.__values(_this.metadata.fields.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var col = _c.value;
                                        result[col.key] = col.valueConverter.fromJson(row[col.key]);
                                    }
                                }
                                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_7) throw e_7.error; }
                                }
                                return result;
                            }), loadOptions, loader)];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, loader.resolveAll()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    RepositoryImplementation.prototype.loadManyToOneForManyRows = function (rawRows, loadOptions, loader) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            function loadManyToOne(repo, toLoad) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    var rows, rows_1, rows_1_1, r;
                    var _a, e_11, _b;
                    return tslib_1.__generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, repo.find({ where: (_a = repo.metadata.idMetadata).getIdFilter.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(toLoad), false)) }, true)];
                            case 1:
                                rows = _c.sent();
                                try {
                                    for (rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                                        r = rows_1_1.value;
                                        repo.addToCache(r);
                                    }
                                }
                                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                                finally {
                                    try {
                                        if (rows_1_1 && !rows_1_1.done && (_b = rows_1.return)) _b.call(rows_1);
                                    }
                                    finally { if (e_11) throw e_11.error; }
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            }
            var loadFields, _b, _c, col, ei, isRelation, load, repo, toLoad, rawRows_1, rawRows_1_1, r, val, e_8_1, result, _loop_1, this_1, _d, _e, col;
            var e_8, _f, e_9, _g, e_10, _h;
            var _this = this;
            return tslib_1.__generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        loadFields = undefined;
                        if (loadOptions === null || loadOptions === void 0 ? void 0 : loadOptions.load)
                            loadFields = loadOptions.load(this.metadata.fields);
                        _j.label = 1;
                    case 1:
                        _j.trys.push([1, 6, 7, 8]);
                        _b = tslib_1.__values(this.metadata.fields), _c = _b.next();
                        _j.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        col = _c.value;
                        ei = (0, getEntityRef_js_1.getEntitySettings)(col.valueType, false);
                        if (!ei) return [3 /*break*/, 4];
                        isRelation = (0, relationInfoMember_js_1.getRelationFieldInfo)(col);
                        if (!!isRelation) return [3 /*break*/, 4];
                        load = !col.options.lazy;
                        if (loadFields !== undefined)
                            load = loadFields.includes(col);
                        if (!load) return [3 /*break*/, 4];
                        repo = this.remult.repo(col.valueType);
                        toLoad = [];
                        try {
                            for (rawRows_1 = (e_9 = void 0, tslib_1.__values(rawRows)), rawRows_1_1 = rawRows_1.next(); !rawRows_1_1.done; rawRows_1_1 = rawRows_1.next()) {
                                r = rawRows_1_1.value;
                                val = r[col.key];
                                if (val !== undefined &&
                                    val !== null &&
                                    !toLoad.includes(val) &&
                                    !repo.idCache.has(val + '')) {
                                    toLoad.push(val);
                                }
                            }
                        }
                        catch (e_9_1) { e_9 = { error: e_9_1 }; }
                        finally {
                            try {
                                if (rawRows_1_1 && !rawRows_1_1.done && (_g = rawRows_1.return)) _g.call(rawRows_1);
                            }
                            finally { if (e_9) throw e_9.error; }
                        }
                        if (!(toLoad.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, loadManyToOne(repo, toLoad)];
                    case 3:
                        _j.sent();
                        _j.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_8_1 = _j.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_f = _b.return)) _f.call(_b);
                        }
                        finally { if (e_8) throw e_8.error; }
                        return [7 /*endfinally*/];
                    case 8: return [4 /*yield*/, Promise.all(rawRows.map(function (r) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.mapRawDataToResult(r, loadFields)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }))];
                    case 9:
                        result = _j.sent();
                        _loop_1 = function (col) {
                            var e_12, _k;
                            var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(col);
                            var incl = col.options
                                .defaultIncluded;
                            if (((_a = loadOptions === null || loadOptions === void 0 ? void 0 : loadOptions.include) === null || _a === void 0 ? void 0 : _a[col.key]) !== undefined) {
                                incl = loadOptions.include[col.key];
                            }
                            if (rel && incl) {
                                var otherRepo = rel.toRepo;
                                var _loop_2 = function (row) {
                                    var _l = this_1.findOptionsBasedOnRelation(rel, col, incl, row, otherRepo), findOptions = _l.findOptions, returnNull = _l.returnNull;
                                    if (returnNull)
                                        row[col.key] = null;
                                    else {
                                        var entityType = rel.toEntity;
                                        var toRepo_1 = otherRepo;
                                        loader
                                            .load({
                                            entityType: entityType,
                                            find: function (options) { return toRepo_1.rawFind(options, false, loader); },
                                            metadata: toRepo_1.metadata,
                                        }, findOptions)
                                            .then(function (result) {
                                            if (result.length == 0 && rel.type == 'toOne')
                                                return;
                                            row[col.key] =
                                                rel.type !== 'toMany'
                                                    ? result.length == 0
                                                        ? null
                                                        : result[0]
                                                    : result;
                                        });
                                    }
                                };
                                try {
                                    for (var result_1 = (e_12 = void 0, tslib_1.__values(result)), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                                        var row = result_1_1.value;
                                        _loop_2(row);
                                    }
                                }
                                catch (e_12_1) { e_12 = { error: e_12_1 }; }
                                finally {
                                    try {
                                        if (result_1_1 && !result_1_1.done && (_k = result_1.return)) _k.call(result_1);
                                    }
                                    finally { if (e_12) throw e_12.error; }
                                }
                            }
                        };
                        this_1 = this;
                        try {
                            for (_d = tslib_1.__values(this.metadata.fields), _e = _d.next(); !_e.done; _e = _d.next()) {
                                col = _e.value;
                                _loop_1(col);
                            }
                        }
                        catch (e_10_1) { e_10 = { error: e_10_1 }; }
                        finally {
                            try {
                                if (_e && !_e.done && (_h = _d.return)) _h.call(_d);
                            }
                            finally { if (e_10) throw e_10.error; }
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /*@internal */
    RepositoryImplementation.prototype.findOptionsBasedOnRelation = function (rel, field, moreFindOptions, row, otherRepo) {
        var e_13, _a, e_14, _b, _c, _d;
        var returnNull = false;
        var returnUndefined = false;
        var where = [];
        var findOptions = {};
        var findOptionsSources = [];
        if (typeof rel.options.findOptions === 'function') {
            findOptionsSources.push(rel.options.findOptions(row));
        }
        else if (typeof rel.options.findOptions === 'object')
            findOptionsSources.push(rel.options.findOptions);
        if (typeof moreFindOptions === 'object') {
            findOptionsSources.push(moreFindOptions);
        }
        try {
            for (var findOptionsSources_1 = tslib_1.__values(findOptionsSources), findOptionsSources_1_1 = findOptionsSources_1.next(); !findOptionsSources_1_1.done; findOptionsSources_1_1 = findOptionsSources_1.next()) {
                var source = findOptionsSources_1_1.value;
                if (source.where)
                    where.push(source.where);
                try {
                    for (var _e = (e_14 = void 0, tslib_1.__values([
                        'limit',
                        'include',
                        'orderBy',
                    ])), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var key = _f.value;
                        //@ts-ignore
                        if (source[key])
                            findOptions[key] = source[key];
                    }
                }
                catch (e_14_1) { e_14 = { error: e_14_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_14) throw e_14.error; }
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (findOptionsSources_1_1 && !findOptionsSources_1_1.done && (_a = findOptionsSources_1.return)) _a.call(findOptionsSources_1);
            }
            finally { if (e_13) throw e_13.error; }
        }
        var relFields = rel.getFields();
        var getFieldValue = function (key) {
            var val = rel.type === 'reference'
                ? (0, getEntityRef_js_1.getEntityRef)(row).fields.find(field.key).getId()
                : row[key];
            if (rel.type === 'toOne' || rel.type === 'reference') {
                if (val === null)
                    returnNull = true;
                else if (val === undefined)
                    returnUndefined = true;
                else if (rel.type === 'reference' && typeof val === 'object')
                    val = otherRepo.metadata.idMetadata.getId(val);
            }
            return val;
        };
        if (relFields.compoundIdField)
            if (rel.type === 'toMany') {
                where.push((_c = {},
                    _c[relFields.compoundIdField] = this.metadata.idMetadata.getId(row),
                    _c));
            }
            else {
                where.push(otherRepo.metadata.idMetadata.getIdFilter(getFieldValue(relFields.compoundIdField)));
            }
        for (var key in relFields.fields) {
            if (Object.prototype.hasOwnProperty.call(relFields.fields, key)) {
                where.push((_d = {}, _d[key] = getFieldValue(relFields.fields[key]), _d));
            }
        }
        findOptions.where = { $and: where };
        if ((rel.type === 'toOne' || rel.type === 'reference') &&
            findOptions.orderBy // I deduce from this that there may be more than one row and we want only the first
        )
            findOptions.limit = 1;
        return { findOptions: findOptions, returnNull: returnNull, returnUndefined: returnUndefined };
    };
    RepositoryImplementation.prototype.mapRawDataToResult = function (r, loadFields) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var x, helper;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!r)
                            return [2 /*return*/, undefined];
                        x = new this.entity(this.remult);
                        helper = new rowHelperImplementation(this._info, x, this, this.edp, this.remult, false);
                        Object.defineProperty(x, getEntityRef_js_1.entityMember, {
                            //I've used define property to hide this member from console.lo g
                            get: function () { return helper; },
                        });
                        return [4 /*yield*/, helper.loadDataFrom(r, loadFields)];
                    case 1:
                        _a.sent();
                        helper.saveOriginalData();
                        return [2 /*return*/, x];
                }
            });
        });
    };
    RepositoryImplementation.prototype.toJson = function (item) {
        var _this = this;
        if (item === undefined || item === null)
            return item;
        if (Array.isArray(item))
            return item.map(function (x) { return _this.toJson(x); });
        if (typeof item.then === 'function')
            return item.then(function (x) { return _this.toJson(x); });
        return this.getEntityRef(item).toApiJson(true);
    };
    RepositoryImplementation.prototype.fromJson = function (json, newRow) {
        var e_15, _a;
        var _this = this;
        if (json === null || json === undefined)
            return json;
        if (Array.isArray(json))
            return json.map(function (item) { return _this.fromJson(item, newRow); });
        var result = new this.entity(this.remult);
        try {
            for (var _b = tslib_1.__values(this.fieldsOf(json)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var col = _c.value;
                var ei = (0, getEntityRef_js_1.getEntitySettings)(col.valueType, false);
                if (ei) {
                    var val = json[col.key];
                    if (typeof val === 'string' || typeof val === 'number')
                        result[col.key] = val;
                    else
                        result[col.key] = this.remult.repo(col.valueType).fromJson(val);
                }
                else {
                    if (json[col.key] !== undefined) {
                        result[col.key] = col.valueConverter.fromJson(json[col.key]);
                    }
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        this.fixTypes(result);
        if (newRow) {
            return this.create(result);
        }
        else {
            var row_2 = new rowHelperImplementation(this._info, result, this, this.edp, this.remult, false);
            Object.defineProperty(result, getEntityRef_js_1.entityMember, {
                //I've used define property to hide this member from console.lo g
                get: function () { return row_2; },
            });
            row_2.saveOriginalData();
            return result;
        }
    };
    RepositoryImplementation.prototype.count = function (where) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = this.edp).count;
                        return [4 /*yield*/, this.translateWhereToFilter(where)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    RepositoryImplementation.prototype.findOne = function (options, skipOrderByAndLimit) {
        if (skipOrderByAndLimit === void 0) { skipOrderByAndLimit = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r, cacheInfo, f, key;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (!options)
                    options = {};
                if (options.useCache) {
                    f = (0, rest_data_provider_js_1.findOptionsToJson)(options, this.metadata);
                    key = JSON.stringify(f);
                    cacheInfo = this.cache.get(key);
                    if (cacheInfo !== undefined) {
                        if (cacheInfo.value &&
                            this.getEntityRef(cacheInfo.value).wasDeleted()) {
                            cacheInfo = undefined;
                            this.cache.delete(key);
                        }
                        else
                            return [2 /*return*/, this.cache.get(key).promise];
                    }
                    else {
                        cacheInfo = {
                            value: undefined,
                            promise: undefined,
                        };
                        this.cache.set(key, cacheInfo);
                    }
                }
                r = this.find(tslib_1.__assign(tslib_1.__assign({}, options), { limit: 1 }), skipOrderByAndLimit).then(function (items) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var r;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                r = undefined;
                                if (items.length > 0)
                                    r = items[0];
                                if (!(!r && options.createIfNotFound)) return [3 /*break*/, 2];
                                r = this.create();
                                if (!options.where) return [3 /*break*/, 2];
                                return [4 /*yield*/, (0, __updateEntityBasedOnWhere_js_1.__updateEntityBasedOnWhere)(this.metadata, options.where, r)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2: return [2 /*return*/, r];
                        }
                    });
                }); });
                if (cacheInfo) {
                    cacheInfo.promise = r = r.then(function (r) {
                        cacheInfo.value = r;
                        return r;
                    });
                }
                return [2 /*return*/, r];
            });
        });
    };
    RepositoryImplementation.prototype.findFirst = function (where, options, skipOrderByAndLimit) {
        if (skipOrderByAndLimit === void 0) { skipOrderByAndLimit = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var w;
            return tslib_1.__generator(this, function (_a) {
                if (!options)
                    options = {};
                if (where) {
                    if (options.where) {
                        w = options.where;
                        options.where = {
                            $and: [w, where],
                        };
                    }
                    else
                        options.where = where;
                }
                return [2 /*return*/, this.findOne(options, skipOrderByAndLimit)];
            });
        });
    };
    RepositoryImplementation.prototype.fieldsOf = function (item) {
        var keys = Object.keys(item);
        return this.metadata.fields.toArray().filter(function (x) { return keys.includes(x.key); });
    };
    RepositoryImplementation.prototype.create = function (item) {
        var e_16, _a;
        var _b;
        var r = new this.entity(this.remult);
        if (item) {
            try {
                for (var _c = tslib_1.__values(this.fieldsOf(item)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var field = _d.value;
                    r[field.key] = item[field.key];
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_16) throw e_16.error; }
            }
            this.fixTypes(r);
        }
        if ((_b = this.defaultFindOptions) === null || _b === void 0 ? void 0 : _b.where) {
            (0, __updateEntityBasedOnWhere_js_1.__updateEntityBasedOnWhere)(this.metadata, this.defaultFindOptions.where, r);
            this.fixTypes(r);
        }
        var z = this.getEntityRef(r);
        return r;
    };
    RepositoryImplementation.prototype.fixTypes = function (item) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, field, val, _c, _d, _e, type, typeName;
            var e_17, _f, e_18, _g;
            return tslib_1.__generator(this, function (_h) {
                try {
                    for (_a = tslib_1.__values(this.fieldsOf(item)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        field = _b.value;
                        val = item[field.key];
                        if (val !== null && val !== undefined) {
                            if (field.valueType === Date && !(val instanceof Date))
                                item[field.key] = field.valueConverter.fromJson(field.valueConverter.toJson(val));
                            else
                                try {
                                    for (_c = (e_18 = void 0, tslib_1.__values([
                                        [String, 'string'],
                                        [Number, 'number'],
                                        [Boolean, 'boolean'],
                                    ])), _d = _c.next(); !_d.done; _d = _c.next()) {
                                        _e = tslib_1.__read(_d.value, 2), type = _e[0], typeName = _e[1];
                                        if (field.valueType === type && typeof val !== typeName)
                                            item[field.key] = field.valueConverter.fromJson(field.valueConverter.toJson(val));
                                    }
                                }
                                catch (e_18_1) { e_18 = { error: e_18_1 }; }
                                finally {
                                    try {
                                        if (_d && !_d.done && (_g = _c.return)) _g.call(_c);
                                    }
                                    finally { if (e_18) throw e_18.error; }
                                }
                        }
                    }
                }
                catch (e_17_1) { e_17 = { error: e_17_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                    }
                    finally { if (e_17) throw e_17.error; }
                }
                return [2 /*return*/, item];
            });
        });
    };
    RepositoryImplementation.prototype.findId = function (id, options) {
        if (id === null || id === undefined)
            return null;
        if (typeof id !== 'string' && typeof id !== 'number')
            throw new Error('id can be either number or string, but got: ' + typeof id);
        return this.findFirst({}, tslib_1.__assign(tslib_1.__assign({}, options), { where: this.metadata.idMetadata.getIdFilter(id) }), true);
    };
    RepositoryImplementation.prototype.translateWhereToFilter = function (where) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var z, z, _c, r;
            var _d;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!where)
                            where = {};
                        if ((_a = this.defaultFindOptions) === null || _a === void 0 ? void 0 : _a.where) {
                            z = where;
                            where = {
                                $and: [z, (_b = this.defaultFindOptions) === null || _b === void 0 ? void 0 : _b.where],
                            };
                        }
                        if (!(this.metadata.options.backendPrefilter && !this.dataProvider.isProxy)) return [3 /*break*/, 2];
                        z = where;
                        _d = {};
                        _c = [z];
                        return [4 /*yield*/, filter_interfaces_js_1.Filter.resolve(this.metadata.options.backendPrefilter)];
                    case 1:
                        where = (_d.$and = _c.concat([_e.sent()]),
                            _d);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, filter_interfaces_js_1.Filter.fromEntityFilter(this.metadata, where)];
                    case 3:
                        r = _e.sent();
                        if (!(r && !this.dataProvider.isProxy)) return [3 /*break*/, 5];
                        return [4 /*yield*/, filter_interfaces_js_1.Filter.translateCustomWhere(r, this.metadata, this.remult)];
                    case 4:
                        r = _e.sent();
                        _e.label = 5;
                    case 5: return [2 /*return*/, r];
                }
            });
        });
    };
    return RepositoryImplementation;
}());
exports.RepositoryImplementation = RepositoryImplementation;
function createOldEntity(entity, remult) {
    var _this = this;
    var r = remult_static_js_1.remultStatic.columnsOfType.get(entity);
    if (!r)
        remult_static_js_1.remultStatic.columnsOfType.set(entity, (r = []));
    var info = (0, getEntityRef_js_1.getEntitySettings)(entity)(remult);
    var key = (0, getEntityRef_js_1.getEntityKey)(entity);
    var base = Object.getPrototypeOf(entity);
    var _loop_3 = function () {
        var e_19, _a;
        var baseCols = remult_static_js_1.remultStatic.columnsOfType.get(base);
        if (baseCols) {
            r.unshift.apply(r, tslib_1.__spreadArray([], tslib_1.__read(baseCols.filter(function (x) { return !r.find(function (y) { return y.key == x.key; }); })), false));
        }
        var baseSettingsFactory = (0, getEntityRef_js_1.getEntitySettings)(base, false);
        if (baseSettingsFactory) {
            var baseSettings_1 = baseSettingsFactory(remult);
            info = tslib_1.__assign(tslib_1.__assign({}, baseSettings_1), info);
            var functions = [
                'saving',
                'saved',
                'deleting',
                'deleted',
                'validation',
            ];
            var _loop_4 = function (key_1) {
                if (baseSettings_1[key_1] && baseSettings_1[key_1] !== info[key_1]) {
                    var x_1 = info[key_1];
                    info[key_1] = function (a, b) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, x_1(a, b)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, baseSettings_1[key_1](a, b)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                }
            };
            try {
                for (var _b = (e_19 = void 0, tslib_1.__values(functions)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key_1 = _c.value;
                    _loop_4(key_1);
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_19) throw e_19.error; }
            }
        }
        base = Object.getPrototypeOf(base);
    };
    while (base != null) {
        _loop_3();
    }
    return new EntityFullInfo(prepareColumnInfo(r, remult), info, remult, entity, key);
}
exports.createOldEntity = createOldEntity;
var rowHelperBase = /** @class */ (function () {
    function rowHelperBase(fieldsMetadata, instance, remult, isNewRow) {
        var e_20, _a;
        var _this = this;
        var _b;
        this.fieldsMetadata = fieldsMetadata;
        this.instance = instance;
        this.remult = remult;
        this.isNewRow = isNewRow;
        this._isLoading = false;
        this.lookups = new Map();
        this.originalValues = {};
        {
            var fac = remult;
            if (fac != null && fac.remultFactory) {
                remult = fac.remultFactory();
            }
        }
        var _loop_5 = function (col) {
            var ei = (0, getEntityRef_js_1.getEntitySettings)(col.valueType, false);
            if (ei && remult) {
                var lookup_1 = new column_js_1.LookupColumn(remult.repo(col.valueType), Boolean((0, relationInfoMember_js_1.getRelationFieldInfo)(col)), col.allowNull);
                this_2.lookups.set(col.key, lookup_1);
                var val = instance[col.key];
                var refImpl_1;
                Object.defineProperty(instance, col.key, {
                    get: function () {
                        if (_this._subscribers) {
                            _this._subscribers.reportObserved();
                            if (!refImpl_1) {
                                refImpl_1 = _this.fields.find(col.key);
                                if (!refImpl_1._subscribers) {
                                    refImpl_1._subscribers = new SubscribableImp();
                                }
                            }
                            refImpl_1._subscribers.reportObserved();
                        }
                        return lookup_1.item;
                    },
                    set: function (val) {
                        var _a;
                        lookup_1.set(val);
                        (_a = _this._subscribers) === null || _a === void 0 ? void 0 : _a.reportChanged();
                        if (!refImpl_1) {
                            refImpl_1 = _this.fields.find(col.key);
                            if (!refImpl_1._subscribers) {
                                refImpl_1._subscribers = new SubscribableImp();
                            }
                        }
                        refImpl_1._subscribers.reportChanged();
                    },
                    enumerable: true,
                });
                lookup_1.set(val);
            }
            else if (((_b = (0, relationInfoMember_js_1.getRelationFieldInfo)(col)) === null || _b === void 0 ? void 0 : _b.type) === 'toOne') {
                var hasVal = instance.hasOwnProperty(col.key);
                var val_1 = instance[col.key];
                if (isNewRow && !val_1)
                    hasVal = false;
                Object.defineProperty(instance, col.key, {
                    get: function () {
                        return val_1;
                    },
                    set: function (newVal) {
                        val_1 = newVal;
                        if (newVal === undefined)
                            return;
                        var op = col.options;
                        if (op.field) {
                            _this.instance[op.field] =
                                (0, relationInfoMember_js_1.getRelationFieldInfo)(col).toRepo.metadata.idMetadata.getId(newVal);
                        }
                        if (op.fields) {
                            for (var key in op.fields) {
                                if (Object.prototype.hasOwnProperty.call(op.fields, key)) {
                                    var element = op.fields[key];
                                    _this.instance[element] = newVal == null ? null : newVal[key];
                                }
                            }
                        }
                    },
                    enumerable: true,
                });
                if (hasVal)
                    instance[col.key] = val_1;
            }
        };
        var this_2 = this;
        try {
            for (var fieldsMetadata_1 = tslib_1.__values(fieldsMetadata), fieldsMetadata_1_1 = fieldsMetadata_1.next(); !fieldsMetadata_1_1.done; fieldsMetadata_1_1 = fieldsMetadata_1.next()) {
                var col = fieldsMetadata_1_1.value;
                _loop_5(col);
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (fieldsMetadata_1_1 && !fieldsMetadata_1_1.done && (_a = fieldsMetadata_1.return)) _a.call(fieldsMetadata_1);
            }
            finally { if (e_20) throw e_20.error; }
        }
    }
    Object.defineProperty(rowHelperBase.prototype, "error", {
        get: function () {
            var _a;
            (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
            return this._error;
        },
        set: function (val) {
            var _a;
            this._error = val;
            (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportChanged();
        },
        enumerable: false,
        configurable: true
    });
    rowHelperBase.prototype.subscribe = function (listener) {
        this.initSubscribers();
        return this._subscribers.subscribe(listener);
    };
    rowHelperBase.prototype.initSubscribers = function () {
        var e_21, _a;
        var _this = this;
        if (!this._subscribers) {
            this._subscribers = new SubscribableImp();
            var _loop_6 = function (col) {
                var ei = (0, getEntityRef_js_1.getEntitySettings)(col.valueType, false);
                var refImpl = this_3.fields.find(col.key);
                refImpl._subscribers = new SubscribableImp();
                if (ei && this_3.remult) {
                }
                else {
                    var val_2 = this_3.instance[col.key];
                    Object.defineProperty(this_3.instance, col.key, {
                        get: function () {
                            _this._subscribers.reportObserved();
                            refImpl._subscribers.reportObserved();
                            return val_2;
                        },
                        set: function (value) {
                            val_2 = value;
                            _this._subscribers.reportChanged();
                            refImpl._subscribers.reportChanged();
                        },
                        enumerable: true,
                    });
                }
            };
            var this_3 = this;
            try {
                for (var _b = tslib_1.__values(this.fieldsMetadata), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var col = _c.value;
                    _loop_6(col);
                }
            }
            catch (e_21_1) { e_21 = { error: e_21_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_21) throw e_21.error; }
            }
        }
    };
    Object.defineProperty(rowHelperBase.prototype, "isLoading", {
        get: function () {
            var _a;
            (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
            return this._isLoading;
        },
        set: function (val) {
            var _a;
            this._isLoading = val;
            (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportChanged();
        },
        enumerable: false,
        configurable: true
    });
    rowHelperBase.prototype.waitLoad = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(tslib_1.__spreadArray([], tslib_1.__read(this.lookups.values()), false).map(function (x) { return x.waitLoad(); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    rowHelperBase.prototype.__assertValidity = function () {
        if (!this.hasErrors())
            throw this.buildErrorInfoObject();
    };
    rowHelperBase.prototype.buildErrorInfoObject = function () {
        var e_22, _a;
        var error = {
            modelState: Object.assign({}, this.errors),
            message: this.error,
        };
        if (!error.message) {
            try {
                for (var _b = tslib_1.__values(this.fieldsMetadata), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var col = _c.value;
                    if (this.errors[col.key]) {
                        error.message =
                            this.fields[col.key].metadata.caption + ': ' + this.errors[col.key];
                        this.error = error.message;
                        break;
                    }
                }
            }
            catch (e_22_1) { e_22 = { error: e_22_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_22) throw e_22.error; }
            }
        }
        return error;
    };
    rowHelperBase.prototype.catchSaveErrors = function (err) {
        var _this = this;
        var e = err;
        if (e instanceof Promise) {
            return e.then(function (x) { return _this.catchSaveErrors(x); });
        }
        if (e.error) {
            e = e.error;
        }
        if (e.message)
            this.error = e.message;
        else if (e.Message)
            this.error = e.Message;
        else
            this.error = e;
        var s = e.modelState;
        if (!s)
            s = e.ModelState;
        if (s) {
            this.errors = s;
        }
        throw err;
    };
    rowHelperBase.prototype.__clearErrorsAndReportChanged = function () {
        this.errors = undefined;
        this.error = undefined;
        this._reportChangedToEntityAndFields();
    };
    rowHelperBase.prototype._reportChangedToEntityAndFields = function () {
        var e_23, _a;
        if (this._subscribers) {
            this._subscribers.reportChanged();
            try {
                for (var _b = tslib_1.__values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    var ref = field;
                    ref._subscribers.reportChanged();
                }
            }
            catch (e_23_1) { e_23 = { error: e_23_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_23) throw e_23.error; }
            }
        }
    };
    rowHelperBase.prototype.hasErrors = function () {
        var _a;
        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
        return !!!this.error && this.errors == undefined;
    };
    rowHelperBase.prototype.copyDataToObject = function (isNew) {
        var e_24, _a;
        if (isNew === void 0) { isNew = false; }
        var d = {};
        try {
            for (var _b = tslib_1.__values(this.fieldsMetadata), _c = _b.next(); !_c.done; _c = _b.next()) {
                var col = _c.value;
                var lu = this.lookups.get(col.key);
                var val = undefined;
                var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(col);
                if (lu)
                    val = lu.id;
                else
                    val = this.instance[col.key];
                if (rel &&
                    isNew &&
                    !col.allowNull &&
                    (val === undefined || val === null)) {
                    if (rel.toRepo.metadata.idMetadata.field.valueType === Number)
                        val = 0;
                    else
                        val = '';
                }
                if (!rel || rel.type === 'reference') {
                    if (val !== undefined) {
                        val = col.valueConverter.toJson(val);
                        if (val !== undefined && val !== null)
                            val = col.valueConverter.fromJson(JSON.parse(JSON.stringify(val)));
                    }
                    d[col.key] = val;
                }
            }
        }
        catch (e_24_1) { e_24 = { error: e_24_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_24) throw e_24.error; }
        }
        return d;
    };
    rowHelperBase.prototype.saveOriginalData = function () {
        this.originalValues = this.copyDataToObject();
        this.saveMoreOriginalData();
    };
    rowHelperBase.prototype.saveMoreOriginalData = function () { };
    rowHelperBase.prototype.validate = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.__clearErrorsAndReportChanged();
                        if (!classValidatorValidate) return [3 /*break*/, 2];
                        return [4 /*yield*/, classValidatorValidate(this.instance, this)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.__performColumnAndEntityValidations()];
                    case 3:
                        _a.sent();
                        r = this.hasErrors();
                        if (!this.hasErrors())
                            return [2 /*return*/, this.buildErrorInfoObject()];
                        else
                            return [2 /*return*/, undefined];
                        return [2 /*return*/];
                }
            });
        });
    };
    rowHelperBase.prototype.__validateEntity = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.__clearErrorsAndReportChanged();
                        if (!classValidatorValidate) return [3 /*break*/, 2];
                        return [4 /*yield*/, classValidatorValidate(this.instance, this)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.__performColumnAndEntityValidations()];
                    case 3:
                        _a.sent();
                        this.__assertValidity();
                        return [2 /*return*/];
                }
            });
        });
    };
    rowHelperBase.prototype.__performColumnAndEntityValidations = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    rowHelperBase.prototype.toApiJson = function (includeRelatedEntities, notJustApi) {
        var e_25, _a;
        if (includeRelatedEntities === void 0) { includeRelatedEntities = false; }
        if (notJustApi === void 0) { notJustApi = false; }
        var result = {};
        try {
            for (var _b = tslib_1.__values(this.fieldsMetadata), _c = _b.next(); !_c.done; _c = _b.next()) {
                var col = _c.value;
                if (notJustApi || !this.remult || col.includedInApi(this.instance)) {
                    var val = void 0;
                    var lu = this.lookups.get(col.key);
                    var disable = false;
                    if (lu)
                        if (includeRelatedEntities) {
                            val = lu.toJson();
                            disable = true;
                            result[col.key] = val;
                        }
                        else
                            val = lu.id;
                    else {
                        if ((0, relationInfoMember_js_1.getRelationFieldInfo)(col) && !includeRelatedEntities) {
                            disable = true;
                        }
                        else {
                            val = this.instance[col.key];
                            if (!this.remult) {
                                if (val) {
                                    var eo = (0, getEntityRef_js_1.getEntitySettings)(val.constructor, false);
                                    if (eo) {
                                        val = (0, getEntityRef_js_1.getEntityRef)(val).getId();
                                    }
                                }
                            }
                        }
                    }
                    if (!disable)
                        result[col.key] = col.valueConverter.toJson(val);
                }
            }
        }
        catch (e_25_1) { e_25 = { error: e_25_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_25) throw e_25.error; }
        }
        return result;
    };
    rowHelperBase.prototype._updateEntityBasedOnApi = function (body, ignoreApiAllowed) {
        if (ignoreApiAllowed === void 0) { ignoreApiAllowed = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keys, _a, _b, col, lu;
            var e_26, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        keys = Object.keys(body);
                        try {
                            for (_a = tslib_1.__values(this.fieldsMetadata), _b = _a.next(); !_b.done; _b = _a.next()) {
                                col = _b.value;
                                if (keys.includes(col.key))
                                    if (col.includedInApi(this.instance)) {
                                        if (!this.remult ||
                                            ignoreApiAllowed ||
                                            col.apiUpdateAllowed(this.instance)) {
                                            lu = this.lookups.get(col.key);
                                            if (lu)
                                                lu.id = body[col.key];
                                            else
                                                this.instance[col.key] = col.valueConverter.fromJson(body[col.key]);
                                        }
                                    }
                            }
                        }
                        catch (e_26_1) { e_26 = { error: e_26_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_26) throw e_26.error; }
                        }
                        return [4 /*yield*/, Promise.all(tslib_1.__spreadArray([], tslib_1.__read(this.fields), false).map(function (x) { return x.load(); }))];
                    case 1:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return rowHelperBase;
}());
var rowHelperImplementation = /** @class */ (function (_super) {
    tslib_1.__extends(rowHelperImplementation, _super);
    function rowHelperImplementation(info, instance, repository, edp, remult, _isNew) {
        var e_27, _a;
        var _this = _super.call(this, info.fieldsMetadata, instance, remult, _isNew) || this;
        _this.info = info;
        _this.repository = repository;
        _this.edp = edp;
        _this._isNew = _isNew;
        _this._wasDeleted = false;
        _this._saving = false;
        _this.metadata = info;
        if (_isNew) {
            try {
                for (var _b = tslib_1.__values(info.fieldsMetadata), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var col = _c.value;
                    if (col.options.defaultValue && instance[col.key] === undefined) {
                        if (typeof col.options.defaultValue === 'function') {
                            instance[col.key] = col.options.defaultValue(instance);
                        }
                        else if (!instance[col.key])
                            instance[col.key] = col.options.defaultValue;
                    }
                }
            }
            catch (e_27_1) { e_27 = { error: e_27_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_27) throw e_27.error; }
            }
        }
        if (_this.info.options.entityRefInit)
            _this.info.options.entityRefInit(_this, instance);
        if (context_js_1.Remult.entityRefInit)
            context_js_1.Remult.entityRefInit(_this, instance);
        return _this;
    }
    rowHelperImplementation.prototype.clone = function () {
        var data = this.toApiJson(true, true);
        return this.repository.fromJson(data, this.isNew());
    };
    Object.defineProperty(rowHelperImplementation.prototype, "relations", {
        get: function () {
            return this.repository.relations(this.instance);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(rowHelperImplementation.prototype, "apiUpdateAllowed", {
        get: function () {
            return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiUpdate);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(rowHelperImplementation.prototype, "apiDeleteAllowed", {
        get: function () {
            return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiDelete);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(rowHelperImplementation.prototype, "apiInsertAllowed", {
        get: function () {
            return this.remult.isAllowedForInstance(this.instance, this.metadata.options.allowApiInsert);
        },
        enumerable: false,
        configurable: true
    });
    rowHelperImplementation.prototype.getId = function () {
        var _this = this;
        var getVal = function (y) {
            var z = _this.lookups.get(y.key);
            if (z)
                return z.id;
            return _this.instance[y.key];
        };
        if (this.metadata.idMetadata.field instanceof CompoundIdField_js_1.CompoundIdField)
            return this.metadata.idMetadata.field.fields.map(getVal).join(',');
        return getVal(this.metadata.idMetadata.field);
    };
    rowHelperImplementation.prototype.saveMoreOriginalData = function () {
        this.originalId = this.getId();
    };
    rowHelperImplementation.prototype.wasDeleted = function () {
        var _a;
        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
        return this._wasDeleted;
    };
    rowHelperImplementation.prototype.undoChanges = function () {
        this.loadDataFrom(this.originalValues);
        this.__clearErrorsAndReportChanged();
    };
    rowHelperImplementation.prototype.reload = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.edp.find({ where: this.getIdFilter() }).then(function (newData) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.loadDataFrom(newData[0])];
                                    case 1:
                                        _a.sent();
                                        this.saveOriginalData();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        this._reportChangedToEntityAndFields();
                        return [2 /*return*/, this.instance];
                }
            });
        });
    };
    Object.defineProperty(rowHelperImplementation.prototype, "fields", {
        get: function () {
            var _a, e_28, _b;
            if (!this._columns) {
                var _items_1 = [];
                var r_1 = (_a = {
                        find: function (c) {
                            return r_1[typeof c === 'string' ? c : c.key];
                        }
                    },
                    _a[Symbol.iterator] = function () { return _items_1[Symbol.iterator](); },
                    _a.toArray = function () { return _items_1; },
                    _a);
                try {
                    for (var _c = tslib_1.__values(this.info.fieldsMetadata), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var c = _d.value;
                        _items_1.push((r_1[c.key] = new FieldRefImplementation(c.options, c, this.instance, this, this)));
                    }
                }
                catch (e_28_1) { e_28 = { error: e_28_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_28) throw e_28.error; }
                }
                this._columns = r_1;
            }
            return this._columns;
        },
        enumerable: false,
        configurable: true
    });
    rowHelperImplementation.prototype.save = function (onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var doNotSave_1, e, _b, _c, col, e_29_1, d, ignoreKeys, _d, _e, field, f, updatedRow, isNew, changesOnly, wasChanged, key, element, _f, _g, listener, e_30_1, err_1;
            var e_29, _h, e_31, _j, e_30, _k;
            return tslib_1.__generator(this, function (_l) {
                switch (_l.label) {
                    case 0:
                        _l.trys.push([0, , 35, 36]);
                        if (this._saving)
                            throw new Error('cannot save while entity is already saving');
                        this._saving = true;
                        if (this.wasDeleted())
                            throw new Error('cannot save a deleted row');
                        this.isLoading = true;
                        if (!(onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject ===
                            undefined)) return [3 /*break*/, 2];
                        // no need
                        return [4 /*yield*/, this.__validateEntity()];
                    case 1:
                        // no need
                        _l.sent();
                        _l.label = 2;
                    case 2:
                        doNotSave_1 = false;
                        e = this.buildLifeCycleEvent(function () { return (doNotSave_1 = true); });
                        if (!!this.remult.dataProvider.isProxy) return [3 /*break*/, 12];
                        _l.label = 3;
                    case 3:
                        _l.trys.push([3, 8, 9, 10]);
                        _b = tslib_1.__values(this.fields), _c = _b.next();
                        _l.label = 4;
                    case 4:
                        if (!!_c.done) return [3 /*break*/, 7];
                        col = _c.value;
                        if (!col.metadata.options.saving) return [3 /*break*/, 6];
                        return [4 /*yield*/, col.metadata.options.saving(this.instance, col, e)];
                    case 5:
                        _l.sent();
                        _l.label = 6;
                    case 6:
                        _c = _b.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_29_1 = _l.sent();
                        e_29 = { error: e_29_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_c && !_c.done && (_h = _b.return)) _h.call(_b);
                        }
                        finally { if (e_29) throw e_29.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        if (!this.info.entityInfo.saving) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.info.entityInfo.saving(this.instance, e)];
                    case 11:
                        _l.sent();
                        _l.label = 12;
                    case 12:
                        this.__assertValidity();
                        d = this.copyDataToObject(this.isNew());
                        ignoreKeys = [];
                        try {
                            for (_d = tslib_1.__values(this.metadata.fields), _e = _d.next(); !_e.done; _e = _d.next()) {
                                field = _e.value;
                                if (field.dbReadOnly ||
                                    (onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject !==
                                        undefined &&
                                        !onlyTheseFieldsSentOnlyInTheCaseOfProxySaveWithPartialObject.includes(field.key))) {
                                    d[field.key] = undefined;
                                    ignoreKeys.push(field.key);
                                    f = this.fields.find(field);
                                    f.value = f.originalValue;
                                }
                            }
                        }
                        catch (e_31_1) { e_31 = { error: e_31_1 }; }
                        finally {
                            try {
                                if (_e && !_e.done && (_j = _d.return)) _j.call(_d);
                            }
                            finally { if (e_31) throw e_31.error; }
                        }
                        updatedRow = void 0;
                        isNew = this.isNew();
                        _l.label = 13;
                    case 13:
                        _l.trys.push([13, 32, , 34]);
                        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportChanged();
                        if (!this.isNew()) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.edp.insert(d)];
                    case 14:
                        updatedRow = _l.sent();
                        return [3 /*break*/, 19];
                    case 15:
                        changesOnly = {};
                        wasChanged = false;
                        for (key in d) {
                            if (Object.prototype.hasOwnProperty.call(d, key)) {
                                element = d[key];
                                if (this.fields.find(key).valueChanged() &&
                                    !ignoreKeys.includes(key)) {
                                    changesOnly[key] = element;
                                    wasChanged = true;
                                }
                            }
                        }
                        if (!wasChanged)
                            return [2 /*return*/, this.instance];
                        if (!doNotSave_1) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.edp.find({ where: this.getIdFilter() })];
                    case 16:
                        updatedRow = (_l.sent())[0];
                        return [3 /*break*/, 19];
                    case 17: return [4 /*yield*/, this.edp.update(this.id, changesOnly)];
                    case 18:
                        updatedRow = _l.sent();
                        _l.label = 19;
                    case 19: return [4 /*yield*/, this.loadDataFrom(updatedRow)];
                    case 20:
                        _l.sent();
                        if (!!this.remult.dataProvider.isProxy) return [3 /*break*/, 30];
                        if (!this.info.entityInfo.saved) return [3 /*break*/, 22];
                        return [4 /*yield*/, this.info.entityInfo.saved(this.instance, e)];
                    case 21:
                        _l.sent();
                        _l.label = 22;
                    case 22:
                        if (!this.repository.listeners) return [3 /*break*/, 30];
                        _l.label = 23;
                    case 23:
                        _l.trys.push([23, 28, 29, 30]);
                        _f = tslib_1.__values(this.repository.listeners.filter(function (x) { return x.saved; })), _g = _f.next();
                        _l.label = 24;
                    case 24:
                        if (!!_g.done) return [3 /*break*/, 27];
                        listener = _g.value;
                        return [4 /*yield*/, listener.saved(this.instance, isNew)];
                    case 25:
                        _l.sent();
                        _l.label = 26;
                    case 26:
                        _g = _f.next();
                        return [3 /*break*/, 24];
                    case 27: return [3 /*break*/, 30];
                    case 28:
                        e_30_1 = _l.sent();
                        e_30 = { error: e_30_1 };
                        return [3 /*break*/, 30];
                    case 29:
                        try {
                            if (_g && !_g.done && (_k = _f.return)) _k.call(_f);
                        }
                        finally { if (e_30) throw e_30.error; }
                        return [7 /*endfinally*/];
                    case 30: return [4 /*yield*/, this.repository.remult.liveQueryPublisher.itemChanged(this.repository.metadata.key, [{ id: this.getId(), oldId: this.getOriginalId(), deleted: false }])];
                    case 31:
                        _l.sent();
                        this.saveOriginalData();
                        this._isNew = false;
                        return [2 /*return*/, this.instance];
                    case 32:
                        err_1 = _l.sent();
                        return [4 /*yield*/, this.catchSaveErrors(err_1)];
                    case 33:
                        _l.sent();
                        return [3 /*break*/, 34];
                    case 34: return [3 /*break*/, 36];
                    case 35:
                        this.isLoading = false;
                        this._reportChangedToEntityAndFields();
                        this._saving = false;
                        return [7 /*endfinally*/];
                    case 36: return [2 /*return*/];
                }
            });
        });
    };
    rowHelperImplementation.prototype.buildLifeCycleEvent = function (preventDefault) {
        if (preventDefault === void 0) { preventDefault = function () { }; }
        var self = this;
        return {
            isNew: self.isNew(),
            fields: self.fields,
            id: self.getId(),
            originalId: self.getOriginalId(),
            metadata: self.repository.metadata,
            repository: self.repository,
            preventDefault: function () { return preventDefault(); },
            relations: self.repository.relations(self.instance),
        };
    };
    rowHelperImplementation.prototype.getIdFilter = function () {
        return filter_interfaces_js_1.Filter.fromEntityFilter(this.metadata, this.repository.metadata.idMetadata.getIdFilter(this.id));
    };
    rowHelperImplementation.prototype.delete = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, _a, _b, listener, e_32_1, err_2;
            var e_32, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.__clearErrorsAndReportChanged();
                        e = this.buildLifeCycleEvent();
                        if (!!this.remult.dataProvider.isProxy) return [3 /*break*/, 2];
                        if (!this.info.entityInfo.deleting) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.info.entityInfo.deleting(this.instance, e)];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2:
                        this.__assertValidity();
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 16, , 18]);
                        return [4 /*yield*/, this.edp.delete(this.id)];
                    case 4:
                        _d.sent();
                        if (!!this.remult.dataProvider.isProxy) return [3 /*break*/, 6];
                        if (!this.info.entityInfo.deleted) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.info.entityInfo.deleted(this.instance, e)];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6:
                        if (!this.repository.listeners) return [3 /*break*/, 14];
                        _d.label = 7;
                    case 7:
                        _d.trys.push([7, 12, 13, 14]);
                        _a = tslib_1.__values(this.repository.listeners.filter(function (x) { return x.deleted; })), _b = _a.next();
                        _d.label = 8;
                    case 8:
                        if (!!_b.done) return [3 /*break*/, 11];
                        listener = _b.value;
                        return [4 /*yield*/, listener.deleted(this.instance)];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10:
                        _b = _a.next();
                        return [3 /*break*/, 8];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_32_1 = _d.sent();
                        e_32 = { error: e_32_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_32) throw e_32.error; }
                        return [7 /*endfinally*/];
                    case 14: return [4 /*yield*/, this.repository.remult.liveQueryPublisher.itemChanged(this.repository.metadata.key, [{ id: this.getId(), oldId: this.getOriginalId(), deleted: true }])];
                    case 15:
                        _d.sent();
                        this._wasDeleted = true;
                        return [3 /*break*/, 18];
                    case 16:
                        err_2 = _d.sent();
                        return [4 /*yield*/, this.catchSaveErrors(err_2)];
                    case 17:
                        _d.sent();
                        return [3 /*break*/, 18];
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    rowHelperImplementation.prototype.loadDataFrom = function (data, loadItems) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, col, lu, e_33_1;
            var e_33, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 10, 11, 12]);
                        _a = tslib_1.__values(this.info.fields), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 9];
                        col = _b.value;
                        lu = this.lookups.get(col.key);
                        if (!lu) return [3 /*break*/, 7];
                        lu.id = data[col.key];
                        if (!(loadItems === undefined)) return [3 /*break*/, 4];
                        if (!(!col.options.lazy && !(0, relationInfoMember_js_1.getRelationFieldInfo)(col))) return [3 /*break*/, 3];
                        return [4 /*yield*/, lu.waitLoad()];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3: return [3 /*break*/, 6];
                    case 4:
                        if (!loadItems.includes(col)) return [3 /*break*/, 6];
                        return [4 /*yield*/, lu.waitLoad()];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        if (!(0, relationInfoMember_js_1.getRelationFieldInfo)(col))
                            this.instance[col.key] = data[col.key];
                        _d.label = 8;
                    case 8:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_33_1 = _d.sent();
                        e_33 = { error: e_33_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_33) throw e_33.error; }
                        return [7 /*endfinally*/];
                    case 12: return [4 /*yield*/, this.calcServerExpression()];
                    case 13:
                        _d.sent();
                        this.id = this.getId();
                        return [2 /*return*/];
                }
            });
        });
    };
    rowHelperImplementation.prototype.getOriginalId = function () {
        return this.originalId;
    };
    rowHelperImplementation.prototype.calcServerExpression = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, col, _c, _d, e_34_1;
            var e_34, _e;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!(0, context_js_1.isBackend)()) return [3 /*break*/, 8];
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 6, 7, 8]);
                        _a = tslib_1.__values(this.info.fieldsMetadata), _b = _a.next();
                        _f.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        col = _b.value;
                        if (!col.options.serverExpression) return [3 /*break*/, 4];
                        _c = this.instance;
                        _d = col.key;
                        return [4 /*yield*/, col.options.serverExpression(this.instance)];
                    case 3:
                        _c[_d] = _f.sent();
                        _f.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_34_1 = _f.sent();
                        e_34 = { error: e_34_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_34) throw e_34.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    rowHelperImplementation.prototype.isNew = function () {
        var _a;
        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
        return this._isNew;
    };
    rowHelperImplementation.prototype.wasChanged = function () {
        var e_35, _a;
        var _b;
        (_b = this._subscribers) === null || _b === void 0 ? void 0 : _b.reportObserved();
        try {
            for (var _c = tslib_1.__values(this.fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                var col = _d.value;
                var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(col.metadata);
                if (!rel || rel.type == 'reference')
                    if (col.valueChanged())
                        return true;
            }
        }
        catch (e_35_1) { e_35 = { error: e_35_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_35) throw e_35.error; }
        }
        return false;
    };
    rowHelperImplementation.prototype.__performColumnAndEntityValidations = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, c, col, e_36_1, e, _c, _d, listener, e_37_1;
            var e_36, _e, e_37, _f;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _g.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.fieldsMetadata), _b = _a.next();
                        _g.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        c = _b.value;
                        if (!c.options.validate) return [3 /*break*/, 3];
                        col = new FieldRefImplementation(c.options, c, this.instance, this, this);
                        return [4 /*yield*/, col.__performValidation()];
                    case 2:
                        _g.sent();
                        _g.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_36_1 = _g.sent();
                        e_36 = { error: e_36_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_36) throw e_36.error; }
                        return [7 /*endfinally*/];
                    case 7:
                        if (!this.info.entityInfo.validation) return [3 /*break*/, 9];
                        e = this.buildLifeCycleEvent(function () { });
                        return [4 /*yield*/, this.info.entityInfo.validation(this.instance, e)];
                    case 8:
                        _g.sent();
                        _g.label = 9;
                    case 9:
                        if (!this.repository.listeners) return [3 /*break*/, 17];
                        _g.label = 10;
                    case 10:
                        _g.trys.push([10, 15, 16, 17]);
                        _c = tslib_1.__values(this.repository.listeners.filter(function (x) { return x.validating; })), _d = _c.next();
                        _g.label = 11;
                    case 11:
                        if (!!_d.done) return [3 /*break*/, 14];
                        listener = _d.value;
                        return [4 /*yield*/, listener.validating(this.instance)];
                    case 12:
                        _g.sent();
                        _g.label = 13;
                    case 13:
                        _d = _c.next();
                        return [3 /*break*/, 11];
                    case 14: return [3 /*break*/, 17];
                    case 15:
                        e_37_1 = _g.sent();
                        e_37 = { error: e_37_1 };
                        return [3 /*break*/, 17];
                    case 16:
                        try {
                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                        }
                        finally { if (e_37) throw e_37.error; }
                        return [7 /*endfinally*/];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    return rowHelperImplementation;
}(rowHelperBase));
exports.rowHelperImplementation = rowHelperImplementation;
var controllerColumns = Symbol.for('controllerColumns');
function prepareColumnInfo(r, remult) {
    return r.map(function (x) { return decorateColumnSettings(x.settings(remult), remult); });
}
function getFields(container, remult) {
    return getControllerRef(container, remult).fields;
}
exports.getFields = getFields;
function getControllerRef(container, remultArg) {
    var remultVar = remultArg || remult_proxy_js_1.remult;
    var result = container[controllerColumns];
    if (!result)
        result = container[getEntityRef_js_1.entityMember];
    if (!result) {
        var columnSettings_1 = remult_static_js_1.remultStatic.columnsOfType.get(container.constructor);
        if (!columnSettings_1)
            remult_static_js_1.remultStatic.columnsOfType.set(container.constructor, (columnSettings_1 = []));
        var base = Object.getPrototypeOf(container.constructor);
        while (base != null) {
            var baseCols = remult_static_js_1.remultStatic.columnsOfType.get(base);
            if (baseCols) {
                columnSettings_1.unshift.apply(columnSettings_1, tslib_1.__spreadArray([], tslib_1.__read(baseCols.filter(function (x) { return !columnSettings_1.find(function (y) { return y.key == x.key; }); })), false));
            }
            base = Object.getPrototypeOf(base);
        }
        container[controllerColumns] = result = new controllerRefImpl(prepareColumnInfo(columnSettings_1, remultVar).map(function (x) { return new columnDefsImpl(x, undefined, remultVar); }), container, remultVar);
    }
    return result;
}
exports.getControllerRef = getControllerRef;
var controllerRefImpl = /** @class */ (function (_super) {
    tslib_1.__extends(controllerRefImpl, _super);
    function controllerRefImpl(columnsInfo, instance, remult) {
        var _a, e_38, _b;
        var _this = _super.call(this, columnsInfo, instance, remult, false) || this;
        var _items = [];
        var r = (_a = {
                find: function (c) {
                    return r[typeof c === 'string' ? c : c.key];
                }
            },
            _a[Symbol.iterator] = function () { return _items[Symbol.iterator](); },
            _a.toArray = function () { return _items; },
            _a);
        try {
            for (var columnsInfo_1 = tslib_1.__values(columnsInfo), columnsInfo_1_1 = columnsInfo_1.next(); !columnsInfo_1_1.done; columnsInfo_1_1 = columnsInfo_1.next()) {
                var col = columnsInfo_1_1.value;
                _items.push((r[col.key] = new FieldRefImplementation(col.options, col, instance, undefined, _this)));
            }
        }
        catch (e_38_1) { e_38 = { error: e_38_1 }; }
        finally {
            try {
                if (columnsInfo_1_1 && !columnsInfo_1_1.done && (_b = columnsInfo_1.return)) _b.call(columnsInfo_1);
            }
            finally { if (e_38) throw e_38.error; }
        }
        _this.fields = r;
        return _this;
    }
    controllerRefImpl.prototype.__performColumnAndEntityValidations = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, col, e_39_1;
            var e_39, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.fields), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        col = _b.value;
                        if (!(col instanceof FieldRefImplementation)) return [3 /*break*/, 3];
                        return [4 /*yield*/, col.__performValidation()];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_39_1 = _d.sent();
                        e_39 = { error: e_39_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_39) throw e_39.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return controllerRefImpl;
}(rowHelperBase));
exports.controllerRefImpl = controllerRefImpl;
var FieldRefImplementation = /** @class */ (function () {
    function FieldRefImplementation(settings, metadata, container, helper, rowBase) {
        this.settings = settings;
        this.metadata = metadata;
        this.container = container;
        this.helper = helper;
        this.rowBase = rowBase;
        this.target = this.settings.target;
        this.entityRef = this.helper;
    }
    FieldRefImplementation.prototype.subscribe = function (listener) {
        if (!this._subscribers) {
            this.rowBase.initSubscribers();
        }
        return this._subscribers.subscribe(listener);
    };
    FieldRefImplementation.prototype.valueIsNull = function () {
        this.reportObserved();
        var lu = this.rowBase.lookups.get(this.metadata.key);
        if (lu) {
            return lu.id === undefined || lu.id === null;
        }
        return this.value === null;
    };
    FieldRefImplementation.prototype.originalValueIsNull = function () {
        this.reportObserved();
        var lu = this.rowBase.lookups.get(this.metadata.key);
        return this.rawOriginalValue() === null;
    };
    FieldRefImplementation.prototype.load = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var lu, rel, _a, _b, val;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        lu = this.rowBase.lookups.get(this.metadata.key);
                        rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(this.metadata);
                        if (!rel) return [3 /*break*/, 5];
                        if (!(rel.type === 'toMany')) return [3 /*break*/, 2];
                        _a = this.container;
                        _b = this.metadata.key;
                        return [4 /*yield*/, this.helper.repository
                                .relations(this.container)[this.metadata.key].find()];
                    case 1: return [2 /*return*/, (_a[_b] = _c.sent())];
                    case 2: return [4 /*yield*/, this.helper.repository
                            .relations(this.container)[this.metadata.key].findOne()];
                    case 3:
                        val = _c.sent();
                        if (val)
                            this.container[this.metadata.key] = val;
                        else
                            return [2 /*return*/, null];
                        _c.label = 4;
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        if (!lu) return [3 /*break*/, 9];
                        if (!this.valueChanged()) return [3 /*break*/, 7];
                        return [4 /*yield*/, lu.waitLoadOf(this.rawOriginalValue())];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7: return [4 /*yield*/, lu.waitLoad()];
                    case 8: return [2 /*return*/, _c.sent()];
                    case 9: return [2 /*return*/, this.value];
                }
            });
        });
    };
    FieldRefImplementation.prototype.reportObserved = function () {
        var _a, _b;
        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportObserved();
        (_b = this.rowBase._subscribers) === null || _b === void 0 ? void 0 : _b.reportObserved();
    };
    FieldRefImplementation.prototype.reportChanged = function () {
        var _a, _b;
        (_a = this._subscribers) === null || _a === void 0 ? void 0 : _a.reportChanged();
        (_b = this.rowBase._subscribers) === null || _b === void 0 ? void 0 : _b.reportChanged();
    };
    Object.defineProperty(FieldRefImplementation.prototype, "error", {
        get: function () {
            this.reportObserved();
            if (!this.rowBase.errors)
                return undefined;
            return this.rowBase.errors[this.metadata.key];
        },
        set: function (error) {
            if (!this.rowBase.errors)
                this.rowBase.errors = {};
            this.rowBase.errors[this.metadata.key] = error;
            this.reportChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FieldRefImplementation.prototype, "displayValue", {
        get: function () {
            this.reportObserved();
            if (this.value != undefined) {
                if (this.settings.displayValue)
                    return this.settings.displayValue(this.container, this.value);
                else if (this.metadata.valueConverter.displayValue)
                    return this.metadata.valueConverter.displayValue(this.value);
                else
                    return this.value.toString();
            }
            return '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FieldRefImplementation.prototype, "value", {
        get: function () {
            return this.container[this.metadata.key];
        },
        set: function (value) {
            this.container[this.metadata.key] = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FieldRefImplementation.prototype, "originalValue", {
        get: function () {
            this.reportObserved();
            var lu = this.rowBase.lookups.get(this.metadata.key);
            if (lu)
                return lu.get(this.rawOriginalValue());
            return this.rowBase.originalValues[this.metadata.key];
        },
        enumerable: false,
        configurable: true
    });
    FieldRefImplementation.prototype.rawOriginalValue = function () {
        return this.rowBase.originalValues[this.metadata.key];
    };
    FieldRefImplementation.prototype.setId = function (id) {
        this.value = id;
    };
    FieldRefImplementation.prototype.getId = function () {
        var lu = this.rowBase.lookups.get(this.metadata.key);
        if (lu)
            return lu.id != undefined ? lu.id : null;
        return this.value;
    };
    Object.defineProperty(FieldRefImplementation.prototype, "inputValue", {
        get: function () {
            this.reportObserved();
            var lu = this.rowBase.lookups.get(this.metadata.key);
            if (lu)
                return lu.id != undefined ? lu.id.toString() : null;
            return this.metadata.valueConverter.toInput(this.value, this.settings.inputType);
        },
        set: function (val) {
            var lu = this.rowBase.lookups.get(this.metadata.key);
            if (lu) {
                lu.setId(val);
            }
            else
                this.value = this.metadata.valueConverter.fromInput(val, this.settings.inputType);
        },
        enumerable: false,
        configurable: true
    });
    FieldRefImplementation.prototype.valueChanged = function () {
        this.reportObserved();
        var val = this.value;
        var lu = this.rowBase.lookups.get(this.metadata.key);
        if (lu) {
            val = lu.id;
        }
        return (JSON.stringify(this.metadata.valueConverter.toJson(this.rowBase.originalValues[this.metadata.key])) != JSON.stringify(this.metadata.valueConverter.toJson(val)));
    };
    FieldRefImplementation.prototype.__performValidation = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var processValidation, self_1, event_1, _b, _c, v, _d, e_40_1, _e, error_1;
            var e_40, _f;
            var _this = this;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _g.trys.push([0, 12, , 13]);
                        processValidation = function (result) {
                            if (result !== true && result !== undefined && !_this.error) {
                                if (typeof result === 'string' && result.length > 0)
                                    _this.error = result;
                                else
                                    _this.error = 'invalid value';
                            }
                        };
                        if (!this.settings.validate) return [3 /*break*/, 11];
                        self_1 = this;
                        event_1 = {
                            entityRef: this.entityRef,
                            get error() {
                                return self_1.error;
                            },
                            set error(value) {
                                self_1.error = value;
                            },
                            isNew: (_a = this.entityRef) === null || _a === void 0 ? void 0 : _a.isNew(),
                            load: function () { return self_1.load(); },
                            metadata: self_1.metadata,
                            originalValue: self_1.originalValue,
                            value: self_1.value,
                            valueChanged: function () { return self_1.valueChanged(); },
                            originalValueIsNull: function () { return self_1.originalValueIsNull(); },
                            valueIsNull: function () { return self_1.valueIsNull(); },
                            isBackend: function () { var _a, _b, _c; return !((_c = (_b = (_a = self_1.rowBase) === null || _a === void 0 ? void 0 : _a.remult) === null || _b === void 0 ? void 0 : _b.dataProvider) === null || _c === void 0 ? void 0 : _c.isProxy); },
                        };
                        if (!Array.isArray(this.settings.validate)) return [3 /*break*/, 9];
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 6, 7, 8]);
                        _b = tslib_1.__values(this.settings.validate), _c = _b.next();
                        _g.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        v = _c.value;
                        _d = processValidation;
                        return [4 /*yield*/, v(this.container, event_1)];
                    case 3:
                        _d.apply(void 0, [_g.sent()]);
                        _g.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_40_1 = _g.sent();
                        e_40 = { error: e_40_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_f = _b.return)) _f.call(_b);
                        }
                        finally { if (e_40) throw e_40.error; }
                        return [7 /*endfinally*/];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        if (!(typeof this.settings.validate === 'function')) return [3 /*break*/, 11];
                        _e = processValidation;
                        return [4 /*yield*/, this.settings.validate(this.container, event_1)];
                    case 10:
                        _e.apply(void 0, [_g.sent()]);
                        _g.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        error_1 = _g.sent();
                        if (typeof error_1 === 'string')
                            this.error = error_1;
                        else
                            this.error = error_1.message;
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    FieldRefImplementation.prototype.validate = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__performValidation()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, !!!this.error];
                }
            });
        });
    };
    return FieldRefImplementation;
}());
exports.FieldRefImplementation = FieldRefImplementation;
var tempCaptionTransformer = {
    transformCaption: function (remult, key, caption, entityMetaData) { return caption; },
};
exports.CaptionTransformer = remult_static_js_1.remultStatic.captionTransformer ||
    (remult_static_js_1.remultStatic.captionTransformer = tempCaptionTransformer);
function buildCaption(caption, key, remult, metaData) {
    var result;
    if (typeof caption === 'function') {
        if (remult)
            result = caption(remult);
    }
    else if (caption)
        result = caption;
    result = exports.CaptionTransformer.transformCaption(remult, key, result, metaData);
    if (result)
        return result;
    if (key)
        return (0, column_js_1.makeTitle)(key);
    return '';
}
exports.buildCaption = buildCaption;
var columnDefsImpl = /** @class */ (function () {
    function columnDefsImpl(settings, entityDefs, remult) {
        var _this = this;
        this.settings = settings;
        this.entityDefs = entityDefs;
        this.remult = remult;
        this.options = this.settings;
        this.target = this.settings.target;
        this.valueConverter = new Proxy(this.settings.valueConverter, {
            get: function (target, prop) {
                var result = target[prop];
                if (typeof result === 'function') {
                    return function () {
                        var _a;
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        try {
                            return target[prop].apply(target, tslib_1.__spreadArray([], tslib_1.__read(args), false));
                        }
                        catch (err) {
                            var error = "".concat(String(prop), " failed for value ").concat(args === null || args === void 0 ? void 0 : args[0], ". Error: ").concat(typeof err === 'string' ? err : err.message);
                            throw {
                                message: _this.caption + ': ' + error,
                                modelState: (_a = {},
                                    _a[_this.key] = error,
                                    _a),
                            };
                        }
                    };
                }
                return result;
            },
        });
        this.allowNull = !!this.settings.allowNull;
        this.valueType = this.settings.valueType;
        this.key = this.settings.key;
        this.inputType = this.settings.inputType;
        if (settings.serverExpression)
            this.isServerExpression = true;
        if (typeof this.settings.allowApiUpdate === 'boolean')
            this.readonly = this.settings.allowApiUpdate;
        if (!this.inputType)
            this.inputType = this.valueConverter.inputType;
        this.dbName = settings.dbName;
        if (this.dbName == undefined)
            this.dbName = settings.key;
        this.caption = buildCaption(settings.caption, settings.key, remult, entityDefs);
    }
    columnDefsImpl.prototype.apiUpdateAllowed = function (item) {
        if (this.options.allowApiUpdate === undefined)
            return true;
        return this.remult.isAllowedForInstance(item, this.options.allowApiUpdate);
    };
    columnDefsImpl.prototype.displayValue = function (item) {
        return this.entityDefs
            .getEntityMetadataWithoutBreakingTheEntity(item)
            .fields.find(this.key).displayValue;
    };
    columnDefsImpl.prototype.includedInApi = function (item) {
        if (this.options.includeInApi === undefined)
            return true;
        return this.remult.isAllowedForInstance(item, this.options.includeInApi);
    };
    columnDefsImpl.prototype.toInput = function (value, inputType) {
        return this.valueConverter.toInput(value, inputType);
    };
    columnDefsImpl.prototype.fromInput = function (inputValue, inputType) {
        return this.valueConverter.fromInput(inputValue, inputType);
    };
    columnDefsImpl.prototype.getDbName = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, (0, filter_consumer_bridge_to_sql_request_js_1.fieldDbName)(this, this.entityDefs)];
            });
        });
    };
    Object.defineProperty(columnDefsImpl.prototype, "dbReadOnly", {
        get: function () {
            return this.settings.dbReadOnly;
        },
        enumerable: false,
        configurable: true
    });
    return columnDefsImpl;
}());
exports.columnDefsImpl = columnDefsImpl;
var EntityFullInfo = /** @class */ (function () {
    function EntityFullInfo(columnsInfo, entityInfo, remult, entityType, key) {
        var _a, e_41, _b;
        var _this = this;
        this.entityInfo = entityInfo;
        this.remult = remult;
        this.entityType = entityType;
        this.key = key;
        this.fieldsMetadata = [];
        this.idMetadata = {
            getId: function (item) {
                if (item === undefined || item === null)
                    return item;
                var ref = (0, getEntityRef_js_1.getEntityRef)(item, false);
                if (ref)
                    return ref.getId();
                if (_this.idMetadata.field instanceof CompoundIdField_js_1.CompoundIdField)
                    return _this.idMetadata.field.getId(item);
                else
                    return item[_this.idMetadata.field.key];
            },
            field: undefined,
            createIdInFilter: function (items) {
                if (items.length > 0)
                    return {
                        $or: items.map(function (x) {
                            return _this.idMetadata.getIdFilter((0, getEntityRef_js_1.getEntityRef)(x).getId());
                        }),
                    };
            },
            isIdField: function (col) {
                return col.key == _this.idMetadata.field.key;
            },
            getIdFilter: function () {
                var _a, _b;
                var ids = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    ids[_i] = arguments[_i];
                }
                if (_this.idMetadata.field instanceof CompoundIdField_js_1.CompoundIdField) {
                    var field_1 = _this.idMetadata.field;
                    return {
                        $or: ids.map(function (x) { return field_1.isEqualTo(x); }),
                    };
                }
                if (ids.length == 1)
                    return _a = {},
                        _a[_this.idMetadata.field.key] = ids[0],
                        _a;
                else
                    return _b = {},
                        _b[_this.idMetadata.field.key] = ids,
                        _b;
            },
        };
        this.options = entityInfo;
        if (this.options.allowApiCrud !== undefined) {
            var crud = void 0;
            if (typeof this.options.allowApiCrud === 'function')
                crud = function (_, remult) { return _this.options.allowApiCrud(remult); };
            else
                crud = this.options.allowApiCrud;
            if (this.options.allowApiDelete === undefined)
                this.options.allowApiDelete = crud;
            if (this.options.allowApiInsert === undefined)
                this.options.allowApiInsert = crud;
            if (this.options.allowApiUpdate === undefined)
                this.options.allowApiUpdate = crud;
            if (this.options.allowApiRead === undefined)
                this.options.allowApiRead = this.options.allowApiCrud;
        }
        if (this.options.allowApiRead === undefined)
            this.options.allowApiRead = true;
        if (!this.key)
            this.key = entityType.name;
        if (!entityInfo.dbName)
            entityInfo.dbName = this.key;
        this.dbName = entityInfo.dbName;
        var r = (_a = {
                find: function (c) {
                    return r[typeof c === 'string' ? c : c.key];
                }
            },
            _a[Symbol.iterator] = function () { return _this.fieldsMetadata[Symbol.iterator](); },
            _a.toArray = function () { return _this.fieldsMetadata; },
            _a);
        try {
            for (var columnsInfo_2 = tslib_1.__values(columnsInfo), columnsInfo_2_1 = columnsInfo_2.next(); !columnsInfo_2_1.done; columnsInfo_2_1 = columnsInfo_2.next()) {
                var x = columnsInfo_2_1.value;
                this.fieldsMetadata.push((r[x.key] = new columnDefsImpl(x, this, remult)));
            }
        }
        catch (e_41_1) { e_41 = { error: e_41_1 }; }
        finally {
            try {
                if (columnsInfo_2_1 && !columnsInfo_2_1.done && (_b = columnsInfo_2.return)) _b.call(columnsInfo_2);
            }
            finally { if (e_41) throw e_41.error; }
        }
        this.fields = r;
        this.caption = buildCaption(entityInfo.caption, this.key, remult, this);
        if (entityInfo.id) {
            var r_2 = typeof entityInfo.id === 'function'
                ? entityInfo.id(this.fields)
                : Object.keys(entityInfo.id).map(function (x) { return _this.fields.find(x); });
            if (Array.isArray(r_2)) {
                if (r_2.length > 1)
                    this.idMetadata.field = new (CompoundIdField_js_1.CompoundIdField.bind.apply(CompoundIdField_js_1.CompoundIdField, tslib_1.__spreadArray([void 0], tslib_1.__read(r_2), false)))();
                else if (r_2.length == 1)
                    this.idMetadata.field = r_2[0];
            }
            else
                this.idMetadata.field = r_2;
        }
        if (!this.idMetadata.field) {
            if (this.fields['id'])
                this.idMetadata.field = this.fields['id'];
            else
                this.idMetadata.field = tslib_1.__spreadArray([], tslib_1.__read(this.fields), false)[0];
        }
    }
    EntityFullInfo.prototype.apiUpdateAllowed = function (item) {
        if (this.options.allowApiUpdate === undefined)
            return false;
        return !item
            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiUpdate)
            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiUpdateAllowed;
    };
    Object.defineProperty(EntityFullInfo.prototype, "apiReadAllowed", {
        get: function () {
            if (this.options.allowApiRead === undefined)
                return true;
            return this.remult.isAllowed(this.options.allowApiRead);
        },
        enumerable: false,
        configurable: true
    });
    EntityFullInfo.prototype.apiDeleteAllowed = function (item) {
        if (this.options.allowApiDelete === undefined)
            return false;
        return !item
            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiDelete)
            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiDeleteAllowed;
    };
    EntityFullInfo.prototype.apiInsertAllowed = function (item) {
        if (this.options.allowApiUpdate === undefined)
            return false;
        return !item
            ? this.remult.isAllowedForInstance(undefined, this.options.allowApiInsert)
            : this.getEntityMetadataWithoutBreakingTheEntity(item).apiInsertAllowed;
    };
    EntityFullInfo.prototype.getEntityMetadataWithoutBreakingTheEntity = function (item) {
        var result = (0, getEntityRef_js_1.getEntityRef)(item, false);
        if (result)
            return result;
        return this.remult.repo(this.entityType).getEntityRef(tslib_1.__assign({}, item));
    };
    EntityFullInfo.prototype.getDbName = function () {
        return (0, filter_consumer_bridge_to_sql_request_js_1.entityDbName)(this);
    };
    return EntityFullInfo;
}());
function FieldType() {
    var options = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        options[_i] = arguments[_i];
    }
    return function (target, context) {
        if (!options) {
            options = [];
        }
        options.splice(0, 0, { valueType: target });
        target[exports.storableMember] = options;
        return target;
    };
}
exports.FieldType = FieldType;
function isAutoIncrement(f) {
    var _a, _b;
    return ((_b = (_a = f.options) === null || _a === void 0 ? void 0 : _a.valueConverter) === null || _b === void 0 ? void 0 : _b.fieldTypeInDb) === 'autoincrement';
}
exports.isAutoIncrement = isAutoIncrement;
function ValueListFieldType() {
    var options = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        options[_i] = arguments[_i];
    }
    return function (type, context) {
        FieldType.apply(void 0, tslib_1.__spreadArray([function (o) {
                ;
                (o.valueConverter = ValueListInfo.get(type)),
                    (o.displayValue = function (item, val) { return val === null || val === void 0 ? void 0 : val.caption; });
            }], tslib_1.__read(options), false))(type, context);
    };
}
exports.ValueListFieldType = ValueListFieldType;
var ValueListInfo = /** @class */ (function () {
    function ValueListInfo(valueListType) {
        var e_42, _a, _b;
        var _this = this;
        this.valueListType = valueListType;
        this.byIdMap = new Map();
        this.values = [];
        this.isNumeric = false;
        for (var member in this.valueListType) {
            var s = this.valueListType[member];
            if (s instanceof this.valueListType) {
                if (s.id === undefined)
                    s.id = member;
                if (typeof s.id === 'number')
                    this.isNumeric = true;
                if (s.caption === undefined)
                    s.caption = (0, column_js_1.makeTitle)(s.id !== undefined ? s.id.toString() : member);
                this.byIdMap.set(s.id, s);
                this.values.push(s);
            }
        }
        if (this.isNumeric) {
            this.fieldTypeInDb = 'integer';
        }
        var options = this.valueListType[exports.storableMember];
        if (options) {
            try {
                for (var options_1 = tslib_1.__values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                    var op = options_1_1.value;
                    if (op === null || op === void 0 ? void 0 : op.getValues) {
                        (_b = this.values).splice.apply(_b, tslib_1.__spreadArray([0, this.values.length], tslib_1.__read(op.getValues()), false));
                        this.byIdMap.clear();
                        this.values.forEach(function (s) {
                            if (s.caption === undefined && s.id !== undefined)
                                s.caption = (0, column_js_1.makeTitle)(s.id);
                            _this.byIdMap.set(s.id, s);
                        });
                    }
                }
            }
            catch (e_42_1) { e_42 = { error: e_42_1 }; }
            finally {
                try {
                    if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
                }
                finally { if (e_42) throw e_42.error; }
            }
            if (this.values.find(function (s) { return s.id === undefined; }))
                throw new Error("ValueType ".concat(this.valueListType, " has values without an id"));
        }
        else
            throw new Error("ValueType not yet initialized, did you forget to call @ValueListFieldType on " +
                valueListType);
    }
    ValueListInfo.get = function (type) {
        var r = typeCache.get(type);
        if (!r) {
            r = new ValueListInfo(type);
            typeCache.set(type, r);
        }
        return r;
    };
    ValueListInfo.prototype.getValues = function () {
        return this.values;
    };
    ValueListInfo.prototype.byId = function (key) {
        if (this.isNumeric)
            key = +key;
        return this.byIdMap.get(key);
    };
    ValueListInfo.prototype.fromJson = function (val) {
        return this.byId(val);
    };
    ValueListInfo.prototype.toJson = function (val) {
        if (!val)
            return undefined;
        return val.id;
    };
    ValueListInfo.prototype.fromDb = function (val) {
        return this.fromJson(val);
    };
    ValueListInfo.prototype.toDb = function (val) {
        return this.toJson(val);
    };
    ValueListInfo.prototype.toInput = function (val, inputType) {
        return this.toJson(val);
    };
    ValueListInfo.prototype.fromInput = function (val, inputType) {
        return this.fromJson(val);
    };
    ValueListInfo.prototype.displayValue = function (val) {
        if (!val)
            return '';
        return val.caption;
    };
    return ValueListInfo;
}());
exports.ValueListInfo = ValueListInfo;
var typeCache = new Map();
function getValueList(type) {
    var _a;
    {
        var fr = (_a = type === null || type === void 0 ? void 0 : type.metadata) === null || _a === void 0 ? void 0 : _a.valueType;
        if (fr)
            return ValueListInfo.get(fr).getValues();
    }
    {
        var fr = type === null || type === void 0 ? void 0 : type.valueType;
        if (fr)
            return ValueListInfo.get(fr).getValues();
    }
    return ValueListInfo.get(type).getValues();
}
exports.getValueList = getValueList;
exports.storableMember = Symbol.for('storableMember');
function buildOptions(options, remult) {
    var e_43, _a;
    var r = {};
    try {
        for (var options_2 = tslib_1.__values(options), options_2_1 = options_2.next(); !options_2_1.done; options_2_1 = options_2.next()) {
            var o = options_2_1.value;
            if (o) {
                if (typeof o === 'function')
                    o(r, remult);
                else
                    Object.assign(r, o);
            }
        }
    }
    catch (e_43_1) { e_43 = { error: e_43_1 }; }
    finally {
        try {
            if (options_2_1 && !options_2_1.done && (_a = options_2.return)) _a.call(options_2);
        }
        finally { if (e_43) throw e_43.error; }
    }
    return r;
}
exports.buildOptions = buildOptions;
function decorateColumnSettings(settings, remult) {
    if (settings.valueType) {
        var settingsOnTypeLevel = settings.valueType[exports.storableMember];
        if (settingsOnTypeLevel) {
            settings = tslib_1.__assign(tslib_1.__assign({}, buildOptions(settingsOnTypeLevel, remult)), settings);
        }
    }
    if (settings.valueType == String) {
        var x = settings;
        if (!settings.valueConverter)
            x.valueConverter = valueConverters_js_1.ValueConverters.String;
    }
    if (settings.valueType == Number) {
        var x = settings;
        if (!settings.valueConverter)
            x.valueConverter = valueConverters_js_1.ValueConverters.Number;
    }
    if (settings.valueType == Date) {
        var x = settings;
        if (!settings.valueConverter) {
            x.valueConverter = valueConverters_js_1.ValueConverters.Date;
        }
    }
    if (settings.valueType == Boolean) {
        var x = settings;
        if (!x.valueConverter)
            x.valueConverter = valueConverters_js_1.ValueConverters.Boolean;
    }
    if (!settings.valueConverter) {
        var ei = (0, getEntityRef_js_1.getEntitySettings)(settings.valueType, false);
        if (ei) {
            var isIdNumeric_1 = undefined;
            settings.valueConverter = {
                toDb: function (x) { return x; },
                fromDb: function (x) { return x; },
            };
            settings.valueConverter = new Proxy(settings.valueConverter, {
                get: function (target, property) {
                    var e_44, _a;
                    if (target[property] === undefined) {
                        if (isIdNumeric_1 === undefined) {
                            if (property === 'inputType')
                                return '';
                            isIdNumeric_1 =
                                remult.repo(settings.valueType).metadata.idMetadata.field
                                    .valueType === Number;
                            try {
                                for (var _b = tslib_1.__values([
                                    'fieldTypeInDb',
                                    'toJson',
                                    'fromJson',
                                    'toDb',
                                    'fromDb',
                                ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var key = _c.value;
                                    //@ts-ignore
                                    target[key] = isIdNumeric_1
                                        ? valueConverters_js_1.ValueConverters.Integer[key]
                                        : valueConverters_js_1.ValueConverters.String[key];
                                }
                            }
                            catch (e_44_1) { e_44 = { error: e_44_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_44) throw e_44.error; }
                            }
                        }
                    }
                    return target[property];
                },
                set: function (target, property, value, receiver) {
                    target[property] = value;
                    return true;
                },
            });
        }
        else
            settings.valueConverter = valueConverters_js_1.ValueConverters.Default;
        return settings;
    }
    if (!settings.valueConverter.toJson) {
        settings.valueConverter.toJson = function (x) { return x; };
    }
    if (!settings.valueConverter.fromJson) {
        settings.valueConverter.fromJson = function (x) { return x; };
    }
    if (!settings.valueConverter.toDb) {
        settings.valueConverter.toDb = function (x) { return settings.valueConverter.toJson(x); };
    }
    if (!settings.valueConverter.fromDb) {
        settings.valueConverter.fromDb = function (x) { return settings.valueConverter.fromJson(x); };
    }
    if (!settings.valueConverter.toInput) {
        settings.valueConverter.toInput = function (x) { return settings.valueConverter.toJson(x); };
    }
    if (!settings.valueConverter.fromInput) {
        settings.valueConverter.fromInput = function (x) {
            return settings.valueConverter.fromJson(x);
        };
    }
    return settings;
}
exports.decorateColumnSettings = decorateColumnSettings;
var EntityBase = /** @class */ (function () {
    function EntityBase() {
    }
    Object.defineProperty(EntityBase.prototype, "_", {
        get: function () {
            return (0, getEntityRef_js_1.getEntityRef)(this);
        },
        enumerable: false,
        configurable: true
    });
    EntityBase.prototype.save = function () {
        return (0, getEntityRef_js_1.getEntityRef)(this).save();
    };
    EntityBase.prototype.assign = function (values) {
        (0, assign_js_1.assign)(this, values);
        return this;
    };
    EntityBase.prototype.delete = function () {
        return this._.delete();
    };
    EntityBase.prototype.isNew = function () {
        return this._.isNew();
    };
    Object.defineProperty(EntityBase.prototype, "$", {
        get: function () {
            return this._.fields;
        },
        enumerable: false,
        configurable: true
    });
    return EntityBase;
}());
exports.EntityBase = EntityBase;
var ControllerBase = /** @class */ (function () {
    function ControllerBase(remult) {
        this.remult = remult || remult_proxy_js_1.remult;
    }
    ControllerBase.prototype.assign = function (values) {
        (0, assign_js_1.assign)(this, values);
        return this;
    };
    Object.defineProperty(ControllerBase.prototype, "$", {
        get: function () {
            return getFields(this, this.remult);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ControllerBase.prototype, "_", {
        get: function () {
            return getControllerRef(this, this.remult);
        },
        enumerable: false,
        configurable: true
    });
    return ControllerBase;
}());
exports.ControllerBase = ControllerBase;
var QueryResultImpl = /** @class */ (function () {
    function QueryResultImpl(options, repo) {
        this.options = options;
        this.repo = repo;
        this._count = undefined;
        if (!this.options)
            this.options = {};
        if (!this.options.pageSize) {
            this.options.pageSize = context_js_1.queryConfig.defaultPageSize;
        }
    }
    QueryResultImpl.prototype.getPage = function (page) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (page < 1)
                    page = 1;
                return [2 /*return*/, this.repo.find({
                        where: this.options.where,
                        orderBy: this.options.orderBy,
                        limit: this.options.pageSize,
                        page: page,
                        load: this.options.load,
                        include: this.options.include,
                    })];
            });
        });
    };
    QueryResultImpl.prototype.count = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this._count === undefined)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.repo.count(this.options.where)];
                    case 1:
                        _a._count = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, this._count];
                }
            });
        });
    };
    QueryResultImpl.prototype.forEach = function (what) {
        var _a, e_45, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var i, _d, _e, _f, x, e_45_1;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        i = 0;
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 7, 8, 13]);
                        _d = true, _e = tslib_1.__asyncValues(this);
                        _g.label = 2;
                    case 2: return [4 /*yield*/, _e.next()];
                    case 3:
                        if (!(_f = _g.sent(), _a = _f.done, !_a)) return [3 /*break*/, 6];
                        _c = _f.value;
                        _d = false;
                        x = _c;
                        return [4 /*yield*/, what(x)];
                    case 4:
                        _g.sent();
                        i++;
                        _g.label = 5;
                    case 5:
                        _d = true;
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_45_1 = _g.sent();
                        e_45 = { error: e_45_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _g.trys.push([8, , 11, 12]);
                        if (!(!_d && !_a && (_b = _e.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _b.call(_e)];
                    case 9:
                        _g.sent();
                        _g.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_45) throw e_45.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, i];
                }
            });
        });
    };
    QueryResultImpl.prototype.paginator = function (pNextPageFilter) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items, nextPage, hasNextPage, nextPageFilter_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.orderBy = sort_js_1.Sort.createUniqueEntityOrderBy(this.repo.metadata, this.options.orderBy);
                        return [4 /*yield*/, this.repo.find({
                                where: {
                                    $and: [this.options.where, pNextPageFilter],
                                },
                                orderBy: this.options.orderBy,
                                limit: this.options.pageSize,
                                load: this.options.load,
                                include: this.options.include,
                            })];
                    case 1:
                        items = _a.sent();
                        nextPage = undefined;
                        hasNextPage = items.length == this.options.pageSize;
                        if (!hasNextPage) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.repo.createAfterFilter(this.options.orderBy, items[items.length - 1])];
                    case 2:
                        nextPageFilter_1 = _a.sent();
                        nextPage = function () { return _this.paginator(nextPageFilter_1); };
                        _a.label = 3;
                    case 3: return [2 /*return*/, {
                            count: function () { return _this.count(); },
                            hasNextPage: hasNextPage,
                            items: items,
                            nextPage: nextPage,
                        }];
                }
            });
        });
    };
    QueryResultImpl.prototype[Symbol.asyncIterator] = function () {
        var _this = this;
        if (!this.options.where) {
            this.options.where = {};
        }
        var ob = this.options.orderBy;
        this.options.orderBy = sort_js_1.Sort.createUniqueEntityOrderBy(this.repo.metadata, ob);
        var itemIndex = -1;
        var currentPage = undefined;
        var itStrategy;
        var j = 0;
        itStrategy = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, prev;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.options.progress) return [3 /*break*/, 2];
                        _b = (_a = this.options.progress).progress;
                        _c = j++;
                        return [4 /*yield*/, this.count()];
                    case 1:
                        _b.apply(_a, [_c / (_d.sent())]);
                        _d.label = 2;
                    case 2:
                        if (!(currentPage === undefined || itemIndex == currentPage.items.length)) return [3 /*break*/, 7];
                        if (currentPage && !currentPage.hasNextPage)
                            return [2 /*return*/, { value: undefined, done: true }];
                        prev = currentPage;
                        if (!currentPage) return [3 /*break*/, 4];
                        return [4 /*yield*/, currentPage.nextPage()];
                    case 3:
                        currentPage = _d.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.paginator()];
                    case 5:
                        currentPage = _d.sent();
                        _d.label = 6;
                    case 6:
                        itemIndex = 0;
                        if (currentPage.items.length == 0) {
                            return [2 /*return*/, { value: undefined, done: true }];
                        }
                        else {
                            if ((prev === null || prev === void 0 ? void 0 : prev.items.length) > 0) {
                                if (this.repo.getEntityRef(prev.items[0]).getId() ==
                                    this.repo.getEntityRef(currentPage.items[0]).getId())
                                    throw new Error('pagination failure, returned same first row');
                            }
                        }
                        _d.label = 7;
                    case 7:
                        if (itemIndex < currentPage.items.length)
                            return [2 /*return*/, { value: currentPage.items[itemIndex++], done: false }];
                        return [2 /*return*/];
                }
            });
        }); };
        return {
            next: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var r;
                return tslib_1.__generator(this, function (_a) {
                    r = itStrategy();
                    return [2 /*return*/, r];
                });
            }); },
        };
    };
    return QueryResultImpl;
}());
var cacheEntityInfo = /** @class */ (function () {
    function cacheEntityInfo() {
        this.value = {};
    }
    return cacheEntityInfo;
}());
var SubscribableImp = /** @class */ (function () {
    function SubscribableImp() {
    }
    SubscribableImp.prototype.reportChanged = function () {
        if (this._subscribers)
            this._subscribers.forEach(function (x) { return x.reportChanged(); });
    };
    SubscribableImp.prototype.reportObserved = function () {
        if (this._subscribers)
            this._subscribers.forEach(function (x) { return x.reportObserved(); });
    };
    SubscribableImp.prototype.subscribe = function (listener) {
        var _this = this;
        var list;
        if (typeof listener === 'function')
            list = {
                reportChanged: function () { return listener(); },
                reportObserved: function () { },
            };
        else
            list = listener;
        if (!this._subscribers) {
            this._subscribers = [];
        }
        this._subscribers.push(list);
        return function () {
            return (_this._subscribers = _this._subscribers.filter(function (x) { return x != list; }));
        };
    };
    return SubscribableImp;
}());
function getEntityMetadata(entity) {
    if (entity.metadata)
        return entity.metadata;
    var settings = (0, getEntityRef_js_1.getEntitySettings)(entity, false);
    if (settings) {
        return remult_proxy_js_1.remult.repo(entity).metadata;
    }
    return entity;
}
exports.getEntityMetadata = getEntityMetadata;
function getRepository(entity) {
    var settings = (0, getEntityRef_js_1.getEntitySettings)(entity, false);
    if (settings) {
        return remult_proxy_js_1.remult.repo(entity);
    }
    return entity;
}
exports.getRepository = getRepository;
