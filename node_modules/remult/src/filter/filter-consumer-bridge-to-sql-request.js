"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fieldDbName = exports.entityDbName = exports.dbNamesOf = exports.shouldNotCreateField = exports.isDbReadonly = exports.CustomSqlFilterBuilder = exports.FilterConsumerBridgeToSqlRequest = void 0;
var tslib_1 = require("tslib");
var sql_database_js_1 = require("../data-providers/sql-database.js");
var RepositoryImplementation_js_1 = require("../remult3/RepositoryImplementation.js");
var relationInfoMember_js_1 = require("../remult3/relationInfoMember.js");
var FilterConsumerBridgeToSqlRequest = /** @class */ (function () {
    function FilterConsumerBridgeToSqlRequest(r, nameProvider) {
        this.r = r;
        this.nameProvider = nameProvider;
        this.where = '';
        this._addWhere = true;
        this.promises = [];
    }
    FilterConsumerBridgeToSqlRequest.prototype.resolveWhere = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var p, p_1, p_1_1, pr, e_1_1;
            var e_1, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.promises.length > 0)) return [3 /*break*/, 9];
                        p = this.promises;
                        this.promises = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        p_1 = (e_1 = void 0, tslib_1.__values(p)), p_1_1 = p_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!p_1_1.done) return [3 /*break*/, 5];
                        pr = p_1_1.value;
                        return [4 /*yield*/, pr];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        p_1_1 = p_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [3 /*break*/, 0];
                    case 9: return [2 /*return*/, this.where];
                }
            });
        });
    };
    FilterConsumerBridgeToSqlRequest.prototype.custom = function (key, customItem) {
        throw new Error('Custom filter should be translated before it gets here');
    };
    FilterConsumerBridgeToSqlRequest.prototype.or = function (orElements) {
        var _this = this;
        var statement = '';
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var orElements_1, orElements_1_1, element, f, where, e_2_1;
            var e_2, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 7]);
                        orElements_1 = tslib_1.__values(orElements), orElements_1_1 = orElements_1.next();
                        _b.label = 1;
                    case 1:
                        if (!!orElements_1_1.done) return [3 /*break*/, 4];
                        element = orElements_1_1.value;
                        f = new FilterConsumerBridgeToSqlRequest(this.r, this.nameProvider);
                        f._addWhere = false;
                        element.__applyToConsumer(f);
                        return [4 /*yield*/, f.resolveWhere()];
                    case 2:
                        where = _b.sent();
                        if (!where)
                            return [2 /*return*/]; //since if any member of or is empty, then the entire or is irrelevant
                        if (where.length > 0) {
                            if (statement.length > 0) {
                                statement += ' or ';
                            }
                            if (orElements.length > 1) {
                                statement += '(' + where + ')';
                            }
                            else
                                statement += where;
                        }
                        _b.label = 3;
                    case 3:
                        orElements_1_1 = orElements_1.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (orElements_1_1 && !orElements_1_1.done && (_a = orElements_1.return)) _a.call(orElements_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 7:
                        this.addToWhere('(' + statement + ')');
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.isNull = function (col) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, this.addToWhere(this.nameProvider.$dbNameOf(col) + ' is null')];
        }); }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.isNotNull = function (col) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, this.addToWhere(this.nameProvider.$dbNameOf(col) + ' is not null')];
        }); }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.isIn = function (col, val) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (val && val.length > 0)
                    this.addToWhere(this.nameProvider.$dbNameOf(col) +
                        ' in (' +
                        val
                            .map(function (x) {
                            return _this.r.addParameterAndReturnSqlToken(col.valueConverter.toDb(x));
                        })
                            .join(',') +
                        ')');
                else
                    this.addToWhere('1 = 0 /*isIn with no values*/');
                return [2 /*return*/];
            });
        }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.isEqualTo = function (col, val) {
        this.add(col, val, '=');
    };
    FilterConsumerBridgeToSqlRequest.prototype.isDifferentFrom = function (col, val) {
        this.add(col, val, '<>');
    };
    FilterConsumerBridgeToSqlRequest.prototype.isGreaterOrEqualTo = function (col, val) {
        this.add(col, val, '>=');
    };
    FilterConsumerBridgeToSqlRequest.prototype.isGreaterThan = function (col, val) {
        this.add(col, val, '>');
    };
    FilterConsumerBridgeToSqlRequest.prototype.isLessOrEqualTo = function (col, val) {
        this.add(col, val, '<=');
    };
    FilterConsumerBridgeToSqlRequest.prototype.isLessThan = function (col, val) {
        this.add(col, val, '<');
    };
    FilterConsumerBridgeToSqlRequest.prototype.containsCaseInsensitive = function (col, val) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.addToWhere('lower (' +
                    this.nameProvider.$dbNameOf(col) +
                    ") like lower ('%" +
                    val.replace(/'/g, "''") +
                    "%')");
                return [2 /*return*/];
            });
        }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.notContainsCaseInsensitive = function (col, val) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.addToWhere('not lower (' +
                    this.nameProvider.$dbNameOf(col) +
                    ") like lower ('%" +
                    val.replace(/'/g, "''") +
                    "%')");
                return [2 /*return*/];
            });
        }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.add = function (col, val, operator) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var x;
            return tslib_1.__generator(this, function (_a) {
                x = this.nameProvider.$dbNameOf(col) +
                    ' ' +
                    operator +
                    ' ' +
                    this.r.addParameterAndReturnSqlToken(col.valueConverter.toDb(val));
                this.addToWhere(x);
                return [2 /*return*/];
            });
        }); })());
    };
    FilterConsumerBridgeToSqlRequest.prototype.addToWhere = function (x) {
        if (this.where.length == 0) {
            if (this._addWhere)
                this.where += ' where ';
        }
        else
            this.where += ' and ';
        this.where += x;
    };
    FilterConsumerBridgeToSqlRequest.prototype.databaseCustom = function (databaseCustom) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var item;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(databaseCustom === null || databaseCustom === void 0 ? void 0 : databaseCustom.buildSql)) return [3 /*break*/, 2];
                        item = new CustomSqlFilterBuilder(this.r);
                        return [4 /*yield*/, databaseCustom.buildSql(item)];
                    case 1:
                        _a.sent();
                        if (item.sql) {
                            this.addToWhere('(' + item.sql + ')');
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); })());
    };
    return FilterConsumerBridgeToSqlRequest;
}());
exports.FilterConsumerBridgeToSqlRequest = FilterConsumerBridgeToSqlRequest;
var CustomSqlFilterBuilder = /** @class */ (function () {
    function CustomSqlFilterBuilder(r) {
        this.r = r;
        this.sql = '';
    }
    CustomSqlFilterBuilder.prototype.addParameterAndReturnSqlToken = function (val, field) {
        if (field)
            val = field.valueConverter.toDb(val);
        return this.r.addParameterAndReturnSqlToken(val);
    };
    CustomSqlFilterBuilder.prototype.filterToRaw = function (repo, condition) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, sql_database_js_1.SqlDatabase.filterToRaw(repo, condition, this)];
            });
        });
    };
    return CustomSqlFilterBuilder;
}());
exports.CustomSqlFilterBuilder = CustomSqlFilterBuilder;
function isDbReadonly(field, dbNames) {
    return (field.dbReadOnly ||
        field.isServerExpression ||
        (field.options.sqlExpression && field.dbName != dbNames.$dbNameOf(field)));
}
exports.isDbReadonly = isDbReadonly;
function shouldNotCreateField(field, dbNames) {
    return (field.isServerExpression ||
        (field.options.sqlExpression && field.dbName != dbNames.$dbNameOf(field)));
}
exports.shouldNotCreateField = shouldNotCreateField;
function dbNamesOf(repo, wrapIdentifier) {
    if (wrapIdentifier === void 0) { wrapIdentifier = function (x) { return x; }; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var meta, result, _a, _b, field, _c, _d, e_3_1;
        var _e, e_3, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    meta = (0, RepositoryImplementation_js_1.getEntityMetadata)(repo);
                    _e = {};
                    return [4 /*yield*/, entityDbName(meta, wrapIdentifier)];
                case 1:
                    result = (_e.$entityName = _g.sent(),
                        _e.toString = function () { return result.$entityName; },
                        _e.$dbNameOf = function (field) {
                            var key;
                            if (typeof field === 'string')
                                key = field;
                            else
                                key = field.key;
                            return result[key];
                        },
                        _e);
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 7, 8, 9]);
                    _a = tslib_1.__values(meta.fields), _b = _a.next();
                    _g.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 6];
                    field = _b.value;
                    _c = result;
                    _d = field.key;
                    return [4 /*yield*/, fieldDbName(field, meta, wrapIdentifier)];
                case 4:
                    _c[_d] = _g.sent();
                    _g.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_3_1 = _g.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 9: return [2 /*return*/, result];
            }
        });
    });
}
exports.dbNamesOf = dbNamesOf;
function entityDbName(metadata, wrapIdentifier) {
    if (wrapIdentifier === void 0) { wrapIdentifier = function (x) { return x; }; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!metadata.options.sqlExpression) return [3 /*break*/, 3];
                    if (!(typeof metadata.options.sqlExpression === 'string')) return [3 /*break*/, 1];
                    return [2 /*return*/, metadata.options.sqlExpression];
                case 1:
                    if (!(typeof metadata.options.sqlExpression === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, metadata.options.sqlExpression(metadata)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3: return [2 /*return*/, wrapIdentifier(metadata.dbName)];
            }
        });
    });
}
exports.entityDbName = entityDbName;
function fieldDbName(f, meta, wrapIdentifier) {
    if (wrapIdentifier === void 0) { wrapIdentifier = function (x) { return x; }; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var result, rel, field, fInfo;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, , 5, 6]);
                    if (!f.options.sqlExpression) return [3 /*break*/, 4];
                    result = void 0;
                    if (!(typeof f.options.sqlExpression === 'function')) return [3 /*break*/, 2];
                    return [4 /*yield*/, f.options.sqlExpression(meta)];
                case 1:
                    result = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    result = f.options.sqlExpression;
                    _a.label = 3;
                case 3:
                    if (!result)
                        return [2 /*return*/, f.dbName];
                    return [2 /*return*/, result];
                case 4:
                    rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(f);
                    field = (rel === null || rel === void 0 ? void 0 : rel.type) === 'toOne' &&
                        f.options.field;
                    if (field) {
                        fInfo = meta.fields.find(field);
                        if (fInfo)
                            return [2 /*return*/, fieldDbName(fInfo, meta, wrapIdentifier)];
                    }
                    return [2 /*return*/, wrapIdentifier(f.dbName)];
                case 5: return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.fieldDbName = fieldDbName;
