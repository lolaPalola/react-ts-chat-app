"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__updateEntityBasedOnWhere = exports.buildFilterFromRequestParameters = exports.entityFilterToJson = exports.FilterSerializer = exports.customDatabaseFilterToken = exports.customUrlToken = exports.OrFilter = exports.AndFilter = exports.Filter = void 0;
var tslib_1 = require("tslib");
var getEntityRef_js_1 = require("../remult3/getEntityRef.js");
var relationInfoMember_js_1 = require("../remult3/relationInfoMember.js");
var Filter = /** @class */ (function () {
    function Filter(apply) {
        this.apply = apply;
    }
    Filter.prototype.__applyToConsumer = function (add) {
        this.apply(add);
    };
    Filter.resolve = function (filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof filter === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, filter()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, filter];
                }
            });
        });
    };
    Filter.createCustom = function (rawFilterTranslator, key) {
        if (key === void 0) { key = ''; }
        var rawFilterInfo = { key: key, rawFilterTranslator: rawFilterTranslator };
        return Object.assign(function (x) {
            var _a;
            var z = {};
            if (x == undefined)
                x = {};
            if (!rawFilterInfo.key)
                throw 'Usage of custom filter before a key was assigned to it';
            return _a = {},
                _a[exports.customUrlToken + rawFilterInfo.key] = x,
                _a;
        }, { rawFilterInfo: rawFilterInfo });
    };
    Filter.fromEntityFilter = function (entity, whereItem) {
        var result = [];
        var _loop_1 = function (key) {
            if (Object.prototype.hasOwnProperty.call(whereItem, key)) {
                var fieldToFilter_1 = whereItem[key];
                {
                    if (key == '$or') {
                        result.push(new (OrFilter.bind.apply(OrFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(fieldToFilter_1.map(function (x) { return Filter.fromEntityFilter(entity, x); })), false)))());
                    }
                    else if (key == '$and') {
                        result.push(new (AndFilter.bind.apply(AndFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(fieldToFilter_1.map(function (x) { return Filter.fromEntityFilter(entity, x); })), false)))());
                    }
                    else if (key.startsWith(exports.customUrlToken)) {
                        result.push(new Filter(function (x) {
                            x.custom(key.substring(exports.customUrlToken.length), fieldToFilter_1);
                        }));
                    }
                    else if (key == exports.customDatabaseFilterToken) {
                        result.push(new Filter(function (x) { return x.databaseCustom(fieldToFilter_1); }));
                    }
                    else {
                        var field = entity.fields[key];
                        var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(field);
                        var op = field.options;
                        var fh = (rel === null || rel === void 0 ? void 0 : rel.type) === 'toOne'
                            ? op.fields
                                ? new manyToOneFilterHelper(field, entity.fields, op)
                                : new toOneFilterHelper(entity.fields[op.field])
                            : new filterHelper(field);
                        var found = false;
                        if (fieldToFilter_1 !== undefined && fieldToFilter_1 != null) {
                            if (fieldToFilter_1.$id !== undefined)
                                fieldToFilter_1 = fieldToFilter_1.$id;
                            for (var key_1 in fieldToFilter_1) {
                                if (Object.prototype.hasOwnProperty.call(fieldToFilter_1, key_1)) {
                                    var element = fieldToFilter_1[key_1];
                                    switch (key_1) {
                                        case '$gte':
                                        case '>=':
                                            result.push(fh.isGreaterOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$gt':
                                        case '>':
                                            result.push(fh.isGreaterThan(element));
                                            found = true;
                                            break;
                                        case '$lte':
                                        case '<=':
                                            result.push(fh.isLessOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$lt':
                                        case '<':
                                            result.push(fh.isLessThan(element));
                                            found = true;
                                            break;
                                        case '$ne':
                                        case '!=':
                                        case '$nin':
                                            found = true;
                                            if (Array.isArray(element)) {
                                                result.push(fh.isNotIn(element));
                                            }
                                            else
                                                result.push(fh.isDifferentFrom(element));
                                            break;
                                        case '$in':
                                            found = true;
                                            result.push(fh.isIn(element));
                                            break;
                                        case '$contains':
                                            found = true;
                                            result.push(fh.contains(element));
                                            break;
                                        case '$notContains':
                                            found = true;
                                            result.push(fh.notContains(element));
                                            break;
                                    }
                                }
                            }
                            if (Array.isArray(fieldToFilter_1)) {
                                found = true;
                                result.push(fh.isIn(fieldToFilter_1));
                            }
                        }
                        if (!found && fieldToFilter_1 !== undefined) {
                            result.push(fh.isEqualTo(fieldToFilter_1));
                        }
                    }
                }
            }
        };
        for (var key in whereItem) {
            _loop_1(key);
        }
        return new (AndFilter.bind.apply(AndFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(result), false)))();
    };
    Filter.prototype.toJson = function () {
        var r = new FilterSerializer();
        this.__applyToConsumer(r);
        return r.result;
    };
    Filter.entityFilterToJson = function (entityDefs, where) {
        return Filter.fromEntityFilter(entityDefs, where).toJson();
    };
    Filter.entityFilterFromJson = function (entityDefs, packed) {
        return buildFilterFromRequestParameters(entityDefs, {
            get: function (key) { return packed[key]; },
        });
    };
    Filter.translateCustomWhere = function (r, entity, remult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var f;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        f = new customTranslator(function (filterKey, custom) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var r, _a, _b, _c, _i, key, element, _d, _e, _f, _g, _h;
                            return tslib_1.__generator(this, function (_j) {
                                switch (_j.label) {
                                    case 0:
                                        r = [];
                                        _a = entity.entityType;
                                        _b = [];
                                        for (_c in _a)
                                            _b.push(_c);
                                        _i = 0;
                                        _j.label = 1;
                                    case 1:
                                        if (!(_i < _b.length)) return [3 /*break*/, 5];
                                        _c = _b[_i];
                                        if (!(_c in _a)) return [3 /*break*/, 4];
                                        key = _c;
                                        element = entity.entityType[key];
                                        if (!(element &&
                                            element.rawFilterInfo &&
                                            element.rawFilterInfo.rawFilterTranslator)) return [3 /*break*/, 4];
                                        if (!(element.rawFilterInfo.key == filterKey)) return [3 /*break*/, 4];
                                        _e = (_d = r).push;
                                        _g = (_f = Filter).fromEntityFilter;
                                        _h = [entity];
                                        return [4 /*yield*/, element.rawFilterInfo.rawFilterTranslator(custom, remult)];
                                    case 2: return [4 /*yield*/, _g.apply(_f, _h.concat([_j.sent()]))];
                                    case 3:
                                        _e.apply(_d, [_j.sent()]);
                                        _j.label = 4;
                                    case 4:
                                        _i++;
                                        return [3 /*break*/, 1];
                                    case 5: return [2 /*return*/, r];
                                }
                            });
                        }); });
                        r.__applyToConsumer(f);
                        return [4 /*yield*/, f.resolve()];
                    case 1:
                        _a.sent();
                        r = new Filter(function (x) { return f.applyTo(x); });
                        return [2 /*return*/, r];
                }
            });
        });
    };
    return Filter;
}());
exports.Filter = Filter;
var filterHelper = /** @class */ (function () {
    function filterHelper(metadata) {
        this.metadata = metadata;
    }
    filterHelper.prototype.processVal = function (val) {
        var ei = (0, getEntityRef_js_1.getEntitySettings)(this.metadata.valueType, false);
        if (ei) {
            if (!val) {
                if (val === null && !this.metadata.allowNull) {
                    var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(this.metadata);
                    if ((rel === null || rel === void 0 ? void 0 : rel.type) === 'reference')
                        if (rel.toRepo.metadata.idMetadata.field.options.valueType === Number)
                            return 0;
                        else
                            return '';
                }
                return null;
            }
            if (typeof val === 'string' || typeof val === 'number')
                return val;
            return (0, getEntityRef_js_1.getEntityRef)(val).getId();
        }
        return val;
    };
    filterHelper.prototype.contains = function (val) {
        var _this = this;
        return new Filter(function (add) { return add.containsCaseInsensitive(_this.metadata, val); });
    };
    filterHelper.prototype.notContains = function (val) {
        var _this = this;
        return new Filter(function (add) {
            return add.notContainsCaseInsensitive(_this.metadata, val);
        });
    };
    filterHelper.prototype.isLessThan = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isLessThan(_this.metadata, val); });
    };
    filterHelper.prototype.isGreaterOrEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isGreaterOrEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isNotIn = function (values) {
        var _this = this;
        return new Filter(function (add) {
            var e_1, _a;
            try {
                for (var values_1 = tslib_1.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                    var v = values_1_1.value;
                    add.isDifferentFrom(_this.metadata, _this.processVal(v));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    };
    filterHelper.prototype.isDifferentFrom = function (val) {
        var _this = this;
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter(function (add) { return add.isNotNull(_this.metadata); });
        return new Filter(function (add) { return add.isDifferentFrom(_this.metadata, val); });
    };
    filterHelper.prototype.isLessOrEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isLessOrEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isGreaterThan = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isGreaterThan(_this.metadata, val); });
    };
    filterHelper.prototype.isEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter(function (add) { return add.isNull(_this.metadata); });
        return new Filter(function (add) { return add.isEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isIn = function (val) {
        var _this = this;
        val = val.map(function (x) { return _this.processVal(x); });
        if ((val === null || val === void 0 ? void 0 : val.length) == 1 && val[0] != undefined && val[0] !== null)
            return new Filter(function (add) { return add.isEqualTo(_this.metadata, val[0]); });
        return new Filter(function (add) { return add.isIn(_this.metadata, val); });
    };
    return filterHelper;
}());
var toOneFilterHelper = /** @class */ (function (_super) {
    tslib_1.__extends(toOneFilterHelper, _super);
    function toOneFilterHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    toOneFilterHelper.prototype.processVal = function (val) {
        if (!val)
            return null;
        if (typeof val === 'string' || typeof val === 'number')
            return val;
        return (0, getEntityRef_js_1.getEntityRef)(val).getId();
    };
    return toOneFilterHelper;
}(filterHelper));
var manyToOneFilterHelper = /** @class */ (function () {
    function manyToOneFilterHelper(metadata, fields, relationOptions) {
        this.metadata = metadata;
        this.fields = fields;
        this.relationOptions = relationOptions;
    }
    manyToOneFilterHelper.prototype.processVal = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.contains = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.notContains = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isLessThan = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isGreaterOrEqualTo = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isNotIn = function (values) {
        var _this = this;
        return new Filter(function (add) {
            values.forEach(function (v) { return _this.isDifferentFrom(v).__applyToConsumer(add); });
        });
    };
    manyToOneFilterHelper.prototype.isDifferentFrom = function (val) {
        var _this = this;
        return new Filter(function (add) {
            var or = [];
            var _loop_2 = function (key) {
                if (Object.prototype.hasOwnProperty.call(_this.relationOptions.fields, key)) {
                    var keyInMyEntity_1 = _this.relationOptions.fields[key];
                    or.push(new Filter(function (add) {
                        return new filterHelper(_this.fields.find(keyInMyEntity_1))
                            .isDifferentFrom(val[key])
                            .__applyToConsumer(add);
                    }));
                }
            };
            for (var key in _this.relationOptions.fields) {
                _loop_2(key);
            }
            add.or(or);
        });
    };
    manyToOneFilterHelper.prototype.isLessOrEqualTo = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isGreaterThan = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isEqualTo = function (val) {
        var _this = this;
        return new Filter(function (add) {
            for (var key in _this.relationOptions.fields) {
                if (Object.prototype.hasOwnProperty.call(_this.relationOptions.fields, key)) {
                    var keyInMyEntity = _this.relationOptions.fields[key];
                    new filterHelper(_this.fields.find(keyInMyEntity))
                        .isEqualTo(val[key])
                        .__applyToConsumer(add);
                }
            }
        });
    };
    manyToOneFilterHelper.prototype.isIn = function (val) {
        var _this = this;
        return new Filter(function (add) {
            add.or(val.map(function (v) { return _this.isEqualTo(v); }));
        });
    };
    return manyToOneFilterHelper;
}());
var AndFilter = /** @class */ (function (_super) {
    tslib_1.__extends(AndFilter, _super);
    function AndFilter() {
        var filters = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            filters[_i] = arguments[_i];
        }
        var _this = _super.call(this, function (add) {
            var e_2, _a;
            try {
                for (var _b = tslib_1.__values(_this.filters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var iterator = _c.value;
                    if (iterator)
                        iterator.__applyToConsumer(add);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }) || this;
        _this.filters = filters;
        return _this;
    }
    AndFilter.prototype.add = function (filter) {
        this.filters.push(filter);
    };
    return AndFilter;
}(Filter));
exports.AndFilter = AndFilter;
var OrFilter = /** @class */ (function (_super) {
    tslib_1.__extends(OrFilter, _super);
    function OrFilter() {
        var filters = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            filters[_i] = arguments[_i];
        }
        var _this = _super.call(this, function (add) {
            var f = _this.filters.filter(function (x) { return x !== undefined; });
            if (f.length > 1) {
                add.or(f);
            }
            else if (f.length == 1)
                f[0].__applyToConsumer(add);
        }) || this;
        _this.filters = filters;
        return _this;
    }
    return OrFilter;
}(Filter));
exports.OrFilter = OrFilter;
exports.customUrlToken = '$custom$';
exports.customDatabaseFilterToken = '$db$';
var customArrayToken = '$an array';
var FilterSerializer = /** @class */ (function () {
    function FilterSerializer() {
        this.result = {};
        this.hasUndefined = false;
    }
    FilterSerializer.prototype.databaseCustom = function (databaseCustom) {
        throw new Error('database custom is not allowed with api calls.');
    };
    FilterSerializer.prototype.custom = function (key, customItem) {
        var _a;
        if (Array.isArray(customItem))
            customItem = (_a = {}, _a[customArrayToken] = customItem, _a);
        this.add(exports.customUrlToken + key, customItem);
    };
    FilterSerializer.prototype.add = function (key, val) {
        if (val === undefined)
            this.hasUndefined = true;
        var r = this.result;
        if (!r[key]) {
            r[key] = val;
            return;
        }
        var v = r[key];
        if (v instanceof Array) {
            v.push(val);
        }
        else
            v = [v, val];
        r[key] = v;
    };
    FilterSerializer.prototype.or = function (orElements) {
        this.add('OR', orElements.map(function (x) {
            var f = new FilterSerializer();
            x.__applyToConsumer(f);
            return f.result;
        }));
    };
    FilterSerializer.prototype.isNull = function (col) {
        this.add(col.key + '.null', true);
    };
    FilterSerializer.prototype.isNotNull = function (col) {
        this.add(col.key + '.null', false);
    };
    FilterSerializer.prototype.isIn = function (col, val) {
        this.add(col.key + '.in', val.map(function (x) { return col.valueConverter.toJson(x); }));
    };
    FilterSerializer.prototype.isEqualTo = function (col, val) {
        this.add(col.key, col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isDifferentFrom = function (col, val) {
        this.add(col.key + '.ne', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isGreaterOrEqualTo = function (col, val) {
        this.add(col.key + '.gte', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isGreaterThan = function (col, val) {
        this.add(col.key + '.gt', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isLessOrEqualTo = function (col, val) {
        this.add(col.key + '.lte', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isLessThan = function (col, val) {
        this.add(col.key + '.lt', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.containsCaseInsensitive = function (col, val) {
        this.add(col.key + '.contains', val);
    };
    FilterSerializer.prototype.notContainsCaseInsensitive = function (col, val) {
        this.add(col.key + '.notContains', val);
    };
    return FilterSerializer;
}());
exports.FilterSerializer = FilterSerializer;
function entityFilterToJson(entityDefs, where) {
    if (!where)
        return {};
    return Filter.fromEntityFilter(entityDefs, where).toJson();
}
exports.entityFilterToJson = entityFilterToJson;
function buildFilterFromRequestParameters(entity, filterInfo) {
    var where = [];
    tslib_1.__spreadArray([], tslib_1.__read(entity.fields), false).forEach(function (col) {
        var _a, _b;
        function addFilter(operation, theFilter, jsonArray, asString) {
            var e_3, _a;
            if (jsonArray === void 0) { jsonArray = false; }
            if (asString === void 0) { asString = false; }
            var val = filterInfo.get(col.key + operation);
            if (val !== undefined) {
                var addFilter_1 = function (val) {
                    var _a;
                    var theVal = val;
                    if (jsonArray) {
                        var arr = void 0;
                        if (typeof val === 'string')
                            arr = JSON.parse(val);
                        else
                            arr = val;
                        theVal = arr.map(function (x) {
                            return asString ? x : col.valueConverter.fromJson(x);
                        });
                    }
                    else {
                        theVal = asString ? theVal : col.valueConverter.fromJson(theVal);
                    }
                    var f = theFilter(theVal);
                    if (f !== undefined) {
                        where.push((_a = {}, _a[col.key] = f, _a));
                    }
                };
                if (!jsonArray && val instanceof Array) {
                    val.forEach(function (v) {
                        addFilter_1(v);
                    });
                }
                else {
                    if (jsonArray) {
                        if (typeof val === 'string')
                            val = JSON.parse(val);
                    }
                    var array = separateArrayFromInnerArray(val);
                    try {
                        for (var array_1 = tslib_1.__values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                            var x = array_1_1.value;
                            addFilter_1(x);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
        }
        addFilter('', function (val) { return val; });
        addFilter('.gt', function (val) { return ({ $gt: val }); });
        addFilter('.gte', function (val) { return ({ $gte: val }); });
        addFilter('.lt', function (val) { return ({ $lt: val }); });
        addFilter('.lte', function (val) { return ({ $lte: val }); });
        addFilter('.ne', function (val) { return ({ $ne: val }); });
        addFilter('.in', function (val) { return val; }, true);
        var nullFilter = filterInfo.get(col.key + '.null');
        if (nullFilter) {
            nullFilter = nullFilter.toString().trim().toLowerCase();
            switch (nullFilter) {
                case 'y':
                case 'true':
                case 'yes':
                    where.push((_a = {}, _a[col.key] = null, _a));
                    break;
                default:
                    where.push((_b = {}, _b[col.key] = { $ne: null }, _b));
                    break;
            }
        }
        addFilter('.contains', function (val) { return ({ $contains: val }); }, false, true);
        addFilter('.notContains', function (val) { return ({ $notContains: val }); }, false, true);
    });
    var val = filterInfo.get('OR');
    if (val) {
        var array = separateArrayFromInnerArray(val);
        var or = array.map(function (v) { return ({
            $or: v.map(function (x) {
                return buildFilterFromRequestParameters(entity, {
                    get: function (key) { return x[key]; },
                });
            }),
        }); });
        if (or.length == 1)
            where.push(or[0]);
        else
            where.push({
                $and: or,
            });
    }
    var _loop_3 = function (key) {
        var element = entity.entityType[key];
        if (element &&
            element.rawFilterInfo &&
            element.rawFilterInfo.rawFilterTranslator) {
            var custom = filterInfo.get(exports.customUrlToken + key);
            if (custom !== undefined) {
                var addItem_1 = function (item) {
                    var _a;
                    if (item[customArrayToken] != undefined)
                        item = item[customArrayToken];
                    where.push((_a = {}, _a[exports.customUrlToken + key] = item, _a));
                };
                if (Array.isArray(custom)) {
                    custom.forEach(function (item) { return addItem_1(item); });
                }
                else
                    addItem_1(custom);
            }
        }
    };
    for (var key in entity.entityType) {
        _loop_3(key);
    }
    if (where.length == 1)
        return where[0];
    return { $and: where };
    function separateArrayFromInnerArray(val) {
        var e_4, _a;
        if (!Array.isArray(val))
            return [val];
        var nonArray = [], array = [];
        try {
            for (var val_1 = tslib_1.__values(val), val_1_1 = val_1.next(); !val_1_1.done; val_1_1 = val_1.next()) {
                var v = val_1_1.value;
                if (Array.isArray(v)) {
                    array.push(v);
                }
                else
                    nonArray.push(v);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (val_1_1 && !val_1_1.done && (_a = val_1.return)) _a.call(val_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        array.push(nonArray);
        return array;
    }
}
exports.buildFilterFromRequestParameters = buildFilterFromRequestParameters;
var customTranslator = /** @class */ (function () {
    function customTranslator(translateCustom) {
        this.translateCustom = translateCustom;
        this.commands = [];
        this.promises = [];
    }
    customTranslator.prototype.applyTo = function (x) {
        this.commands.forEach(function (y) { return y(x); });
    };
    customTranslator.prototype.or = function (orElements) {
        var _this = this;
        var newOrElements;
        this.promises.push(Promise.all(orElements.map(function (element) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        c = new customTranslator(this.translateCustom);
                        element.__applyToConsumer(c);
                        return [4 /*yield*/, c.resolve()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Filter(function (x) { return c.applyTo(x); })];
                }
            });
        }); })).then(function (x) {
            newOrElements = x;
        }));
        this.commands.push(function (x) { return x.or(newOrElements); });
    };
    customTranslator.prototype.isEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isEqualTo(col, val); });
    };
    customTranslator.prototype.isDifferentFrom = function (col, val) {
        this.commands.push(function (x) { return x.isDifferentFrom(col, val); });
    };
    customTranslator.prototype.isNull = function (col) {
        this.commands.push(function (x) { return x.isNull(col); });
    };
    customTranslator.prototype.isNotNull = function (col) {
        this.commands.push(function (x) { return x.isNotNull(col); });
    };
    customTranslator.prototype.isGreaterOrEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isGreaterOrEqualTo(col, val); });
    };
    customTranslator.prototype.isGreaterThan = function (col, val) {
        this.commands.push(function (x) { return x.isGreaterThan(col, val); });
    };
    customTranslator.prototype.isLessOrEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isLessOrEqualTo(col, val); });
    };
    customTranslator.prototype.isLessThan = function (col, val) {
        this.commands.push(function (x) { return x.isLessThan(col, val); });
    };
    customTranslator.prototype.containsCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.containsCaseInsensitive(col, val); });
    };
    customTranslator.prototype.notContainsCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.notContainsCaseInsensitive(col, val); });
    };
    customTranslator.prototype.isIn = function (col, val) {
        this.commands.push(function (x) { return x.isIn(col, val); });
    };
    customTranslator.prototype.custom = function (key, customItem) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var r;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.translateCustom(key, customItem)];
                    case 1:
                        r = _a.sent();
                        if (r)
                            if (Array.isArray(r))
                                r.forEach(function (x) { return x.__applyToConsumer(_this); });
                            else
                                r.__applyToConsumer(this);
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    customTranslator.prototype.databaseCustom = function (custom) {
        this.commands.push(function (x) { return x.databaseCustom(custom); });
    };
    customTranslator.prototype.resolve = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var p;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.promises.length > 0)) return [3 /*break*/, 2];
                        p = this.promises;
                        this.promises = [];
                        return [4 /*yield*/, Promise.all(p)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 0];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return customTranslator;
}());
function __updateEntityBasedOnWhere(entityDefs, where, r) {
    var w = Filter.fromEntityFilter(entityDefs, where);
    var emptyFunction = function () { };
    if (w) {
        w.__applyToConsumer({
            custom: emptyFunction,
            databaseCustom: emptyFunction,
            containsCaseInsensitive: emptyFunction,
            notContainsCaseInsensitive: emptyFunction,
            isDifferentFrom: emptyFunction,
            isEqualTo: function (col, val) {
                r[col.key] = val;
            },
            isGreaterOrEqualTo: emptyFunction,
            isGreaterThan: emptyFunction,
            isIn: emptyFunction,
            isLessOrEqualTo: emptyFunction,
            isLessThan: emptyFunction,
            isNotNull: emptyFunction,
            isNull: emptyFunction,
            or: emptyFunction,
        });
    }
}
exports.__updateEntityBasedOnWhere = __updateEntityBasedOnWhere;
// toRaw of default remult threw and exception
// toRaw didn't respect
